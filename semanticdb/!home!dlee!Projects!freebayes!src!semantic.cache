;; Object src/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "src/"
  :tables (list 
   (semanticdb-table "alleles.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("iostream" include (:system-flag t) nil [215 234])
            ("fstream" include (:system-flag t) nil [235 253])
            ("string" include (:system-flag t) nil [254 271])
            ("vector" include (:system-flag t) nil [272 289])
            ("map" include (:system-flag t) nil [290 304])
            ("iterator" include (:system-flag t) nil [305 324])
            ("algorithm" include (:system-flag t) nil [325 345])
            ("cmath" include (:system-flag t) nil [346 362])
            ("time.h" include (:system-flag t) nil [363 380])
            ("BamReader.h" include nil nil [403 425])
            ("Fasta.h" include nil nil [426 444])
            ("TryCatch.h" include nil nil [445 466])
            ("Parameters.h" include nil nil [467 490])
            ("Allele.h" include nil nil [491 510])
            ("AlleleParser.h" include nil nil [511 536])
            ("split.h" include nil nil [537 555])
            ("multichoose.h" include nil nil [557 581])
            ("multipermute.h" include nil nil [582 607])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [609 629])
            ("Allele::_freeList" variable (:type ("AlleleFreeList" type (:type "class") nil nil)) nil [1039 1072])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [1084 1093])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [1094 1107]))                  
                :type "int")
                nil [1074 2633]))          
    :file "alleles.cpp"
    :pointmax 2634
    :fsize 2633
    :lastmodtime '(21565 38081 542449 416000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Fasta.h"
    :file "Fasta.h"
    :fsize 2467
    :lastmodtime '(21565 38081 518450 562000)
    )
   (semanticdb-table "TryCatch.h"
    :file "TryCatch.h"
    :fsize 398
    :lastmodtime '(21565 38081 522450 371000)
    )
   (semanticdb-table "Parameters.h"
    :file "Parameters.h"
    :fsize 4992
    :lastmodtime '(21565 38081 521450 419000)
    )
   (semanticdb-table "Allele.h"
    :major-mode 'c-mode
    :tags 
        '( ("_ALLELE_H" variable (:constant-flag t) nil [27 36])
            ("cstdio" include (:system-flag t) nil [38 55])
            ("iostream" include (:system-flag t) nil [56 75])
            ("fstream" include (:system-flag t) nil [76 94])
            ("string" include (:system-flag t) nil [95 112])
            ("vector" include (:system-flag t) nil [113 130])
            ("list" include (:system-flag t) nil [131 146])
            ("map" include (:system-flag t) nil [147 161])
            ("limits" include (:system-flag t) nil [162 179])
            ("sstream" include (:system-flag t) nil [180 198])
            ("assert.h" include (:system-flag t) nil [199 218])
            ("Utility.h" include nil nil [219 239])
            ("convert.h" include nil nil [240 260])
            ("api/BamAlignment.h" include nil nil [261 290])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [292 312])
            ("BamTools" using (:type ("BamTools" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [313 338])
            ("Allele" type
               (:prototype t
                :type "class")
                nil [340 353])
            ("AlleleFreeList" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [475 482])
                    ("AlleleFreeList" function
                       (:constructor-flag t
                        :type ("AlleleFreeList" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [487 689])
                    ("AlleleFreeList" function
                       (:prototype-flag t
                        :destructor-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [695 713])
                    ("Purge" function
                       (:prototype-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [718 731])
                    ("Resize" function
                       (:prototype-flag t
                        :arguments 
                          ( ("new_size" variable (:type "int") (reparse-symbol arg-sub-list) [748 761]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [736 762])
                    ("NewAllele" function
                       (:prototype-flag t
                        :pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [767 785])
                    ("Recycle" function
                       (:prototype-flag t
                        :arguments 
                          ( ("mem" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [803 813]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [790 814])
                    ("private" label nil (reparse-symbol classsubparts) [816 824])
                    ("_p" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [829 840])
                    ("_size" variable (:type "int") (reparse-symbol classsubparts) [845 855])
                    ("_allocs" variable (:type "int") (reparse-symbol classsubparts) [892 904])
                    ("_min_size" variable (:type "int") (reparse-symbol classsubparts) [932 946])
                    ("_max_size" variable (:type "int") (reparse-symbol classsubparts) [1007 1021])
                    ("_tick_allocs" variable (:type "int") (reparse-symbol classsubparts) [1026 1043]))                  
                :type "class")
                nil [451 1066])
            ("AlleleType" type
               (:members 
                  ( ("ALLELE_GENOTYPE" variable
                       (:constant-flag t
                        :default-value (1146 1147)
                        :type "int")
                        (reparse-symbol enumsubparts) [1128 1147])
                    ("ALLELE_REFERENCE" variable
                       (:constant-flag t
                        :default-value (1172 1173)
                        :type "int")
                        (reparse-symbol enumsubparts) [1153 1173])
                    ("ALLELE_MNP" variable
                       (:constant-flag t
                        :default-value (1192 1193)
                        :type "int")
                        (reparse-symbol enumsubparts) [1179 1193])
                    ("ALLELE_SNP" variable
                       (:constant-flag t
                        :default-value (1212 1213)
                        :type "int")
                        (reparse-symbol enumsubparts) [1199 1213])
                    ("ALLELE_INSERTION" variable
                       (:constant-flag t
                        :default-value (1238 1240)
                        :type "int")
                        (reparse-symbol enumsubparts) [1219 1240])
                    ("ALLELE_DELETION" variable
                       (:constant-flag t
                        :default-value (1264 1266)
                        :type "int")
                        (reparse-symbol enumsubparts) [1246 1266])
                    ("ALLELE_COMPLEX" variable
                       (:constant-flag t
                        :default-value (1289 1291)
                        :type "int")
                        (reparse-symbol enumsubparts) [1272 1291])
                    ("ALLELE_NULL" variable
                       (:constant-flag t
                        :default-value (1311 1314)
                        :type "int")
                        (reparse-symbol enumsubparts) [1297 1314]))                  
                :type "enum")
                nil [1106 1317])
            ("AlleleStrand" type
               (:members 
                  ( ("STRAND_FORWARD" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1434 1449])
                    ("STRAND_REVERSE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [1454 1470]))                  
                :type "enum")
                nil [1410 1471])
            ("Position" type
               (:typedef ("long int")
                :superclasses "long int"
                :type "typedef")
                nil [1473 1499])
            ("Allele" type
               (:members 
                  ( ("AlleleFreeList" friend nil (reparse-symbol classsubparts) [1521 1548])
                    ("stringForAllele" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1585 1601]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1555 1602])
                    ("stringForAlleles" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("av" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1638 1657]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1607 1658])
                    ("<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1686 1702])
                            ("b" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1703 1719]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1664 1720])
                    ("==" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1748 1764])
                            ("b" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1765 1781]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1725 1782])
                    ("!=" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1810 1826])
                            ("b" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1827 1843]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1787 1844])
                    ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1877 1890])
                            ("a" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1891 1909]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1850 1910])
                    ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1942 1955])
                            ("a" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1956 1975]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1915 1976])
                    ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2008 2021])
                            ("a" variable
                               (:reference 1
                                :type ("list" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2022 2039]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1981 2040])
                    ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2073 2086])
                            ("a" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2087 2097]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2046 2098])
                    ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2130 2143])
                            ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2144 2153])
                            ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2153 2155]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2103 2156])
                    ("json" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2181 2206])
                            ("position" variable
                               (:reference 1
                                :type "long int")
                                (reparse-symbol arg-sub-list) [2207 2226]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2162 2227])
                    ("json" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2251 2276]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2232 2277])
                    ("json" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2301 2316])
                            ("position" variable
                               (:reference 1
                                :type "long int")
                                (reparse-symbol arg-sub-list) [2317 2336]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2282 2337])
                    ("json" function
                       (:prototype-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2361 2370])
                            ("" variable (:type ("allele" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2370 2377]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2342 2378])
                    ("public" label nil (reparse-symbol classsubparts) [2380 2387])
                    ("type" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2393 2409])
                    ("referenceName" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2461 2482])
                    ("referenceSequence" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2528 2553])
                    ("alternateSequence" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2610 2635])
                    ("sequencingTechnology" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2713 2741])
                    ("position" variable (:type "long int") (reparse-symbol classsubparts) [2793 2811])
                    ("currentReferencePosition" variable
                       (:pointer 1
                        :type "long int")
                        (reparse-symbol classsubparts) [2859 2894])
                    ("currentReferenceBase" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol classsubparts) [2998 3025])
                    ("length" variable (:type "unsigned int") (reparse-symbol classsubparts) [3068 3088])
                    ("referenceLength" variable (:type "unsigned int") (reparse-symbol classsubparts) [3166 3195])
                    ("repeatRightBoundary" variable (:type "long int") (reparse-symbol classsubparts) [3249 3278])
                    ("basesLeft" variable (:type "int") (reparse-symbol classsubparts) [3377 3391])
                    ("basesRight" variable (:type "int") (reparse-symbol classsubparts) [3446 3461])
                    ("strand" variable (:type ("AlleleStrand" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3466 3486])
                    ("sampleID" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3531 3547])
                    ("readGroupID" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3587 3606])
                    ("readID" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3640 3654])
                    ("baseQualities" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("short" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3717 3745])
                    ("quality" variable (:type "long double") (reparse-symbol classsubparts) [3750 3770])
                    ("lnquality" variable (:type "long double") (reparse-symbol classsubparts) [3891 3913])
                    ("currentBase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3943 3962])
                    ("mapQuality" variable (:type "short") (reparse-symbol classsubparts) [4025 4042])
                    ("lnmapQuality" variable (:type "long double") (reparse-symbol classsubparts) [4093 4118])
                    ("readMismatchRate" variable (:type "double") (reparse-symbol classsubparts) [4169 4193])
                    ("readIndelRate" variable (:type "double") (reparse-symbol classsubparts) [4237 4258])
                    ("readSNPRate" variable (:type "double") (reparse-symbol classsubparts) [4289 4308])
                    ("isProperPair" variable (:type "bool") (reparse-symbol classsubparts) [4346 4364])
                    ("isPaired" variable (:type "bool") (reparse-symbol classsubparts) [4428 4442])
                    ("isMateMapped" variable (:type "bool") (reparse-symbol classsubparts) [4511 4529])
                    ("genotypeAllele" variable (:type "bool") (reparse-symbol classsubparts) [4572 4592])
                    ("processed" variable (:type "bool") (reparse-symbol classsubparts) [4644 4659])
                    ("cigar" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4724 4737])
                    ("alignmentAlleles" variable
                       (:pointer 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [4782 4815])
                    ("alignmentStart" variable (:type "long int") (reparse-symbol classsubparts) [4820 4844])
                    ("alignmentEnd" variable (:type "long int") (reparse-symbol classsubparts) [4849 4871])
                    ("Allele" function
                       (:constructor-flag t
                        :arguments 
                          ( ("t" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4963 4976])
                            ("refname" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [4989 5005])
                            ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [5017 5030])
                            ("crefpos" variable
                               (:pointer 1
                                :type "long int")
                                (reparse-symbol arg-sub-list) [5043 5061])
                            ("crefbase" variable
                               (:pointer 1
                                :type "char")
                                (reparse-symbol arg-sub-list) [5073 5088])
                            ("len" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [5100 5117])
                            ("rrbound" variable (:type "long int") (reparse-symbol arg-sub-list) [5129 5146])
                            ("bleft" variable (:type "int") (reparse-symbol arg-sub-list) [5158 5168])
                            ("bright" variable (:type "int") (reparse-symbol arg-sub-list) [5180 5191])
                            ("alt" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5203 5214])
                            ("sampleid" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5226 5243])
                            ("readid" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5255 5270])
                            ("readgroupid" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5282 5302])
                            ("sqtech" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5314 5329])
                            ("strnd" variable (:type "bool") (reparse-symbol arg-sub-list) [5341 5352])
                            ("qual" variable (:type "long double") (reparse-symbol arg-sub-list) [5365 5382])
                            ("qstr" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5394 5406])
                            ("mapqual" variable (:type "short") (reparse-symbol arg-sub-list) [5419 5433])
                            ("ispair" variable (:type "bool") (reparse-symbol arg-sub-list) [5445 5457])
                            ("ismm" variable (:type "bool") (reparse-symbol arg-sub-list) [5469 5479])
                            ("isproppair" variable (:type "bool") (reparse-symbol arg-sub-list) [5491 5507])
                            ("cigarstr" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5519 5535])
                            ("ra" variable
                               (:pointer 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [5547 5566])
                            ("bas" variable (:type "long int") (reparse-symbol arg-sub-list) [5578 5591])
                            ("bae" variable (:type "long int") (reparse-symbol arg-sub-list) [5603 5616]))                          
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4956 6966])
                    ("Allele" function
                       (:constructor-flag t
                        :arguments 
                          ( ("t" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7020 7033])
                            ("alt" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7038 7049])
                            ("len" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [7054 7071])
                            ("reflen" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [7076 7096])
                            ("cigarStr" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7101 7117])
                            ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [7122 7135])
                            ("rrbound" variable (:type "long int") (reparse-symbol arg-sub-list) [7142 7159])
                            ("gallele" variable (:type "bool") (reparse-symbol arg-sub-list) [7166 7179])
                            ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7179 7184]))                          
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7013 7753])
                    ("equivalent" function
                       (:prototype-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7775 7785]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [7759 7786])
                    ("typeStr" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7883 7888]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7868 7895])
                    ("isReference" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7982 7987]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [7965 7994])
                    ("isSNP" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8046 8051]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8035 8058])
                    ("isInsertion" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8110 8115]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8093 8122])
                    ("isDeletion" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8179 8184]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8163 8191])
                    ("isMNP" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8242 8247]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8231 8254])
                    ("isComplex" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8304 8309]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8289 8316])
                    ("isNull" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8367 8372]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8355 8379])
                    ("referenceOffset" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8435 8440]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [8415 8447])
                    ("currentQuality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8479 8484]))                          
                        :type "short")
                        (reparse-symbol classsubparts) [8452 8491])
                    ("lncurrentQuality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8599 8604]))                          
                        :type "long double")
                        (reparse-symbol classsubparts) [8564 8611])
                    ("subquality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("startpos" variable (:type "int") (reparse-symbol arg-sub-list) [8637 8650])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [8651 8659]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [8616 8666])
                    ("lnsubquality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("startpos" variable (:type "int") (reparse-symbol arg-sub-list) [8702 8715])
                            ("len" variable (:type "int") (reparse-symbol arg-sub-list) [8716 8724]))                          
                        :type "long double")
                        (reparse-symbol classsubparts) [8671 8731])
                    ("subquality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [8757 8773]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [8736 8780])
                    ("lnsubquality" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [8816 8832]))                          
                        :type "long double")
                        (reparse-symbol classsubparts) [8785 8839])
                    ("sameSample" function
                       (:prototype-flag t
                        :arguments 
                          ( ("other" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9108 9122]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9092 9123])
                    ("update" function
                       (:prototype-flag t
                        :arguments 
                          ( ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [9196 9217]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [9184 9221])
                    ("setQuality" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9300 9305]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [9284 9306])
                    ("base" function
                       (:prototype-flag t
                        :constant-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9450 9455]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9432 9462])
                    ("json" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9790 9795]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9778 9796])
                    ("getLengthOnReference" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9835 9840]))                          
                        :type "unsigned int")
                        (reparse-symbol classsubparts) [9801 9841])
                    ("referenceLengthFromCigar" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9875 9880]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [9846 9881])
                    ("readSeq" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9902 9907]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9887 9908])
                    ("read5p" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9927 9932]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9913 9933])
                    ("read3p" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9952 9957]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9938 9958])
                    ("read5pNonNull" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9984 9989]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9963 9990])
                    ("read3pNonNull" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10016 10021]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [9995 10022])
                    ("read5pNonNullBases" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10147 10152]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [10124 10153])
                    ("read3pNonNullBases" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10277 10282]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [10254 10283])
                    ("extend" function
                       (:prototype-flag t
                        :arguments 
                          ( ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [10459 10467])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [10468 10488]))                          
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [10436 10489])
                    ("squash" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10506 10511]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10494 10512])
                    ("subtract" function
                       (:prototype-flag t
                        :arguments 
                          ( ("subtractFromRefStart" variable (:type "int") (reparse-symbol arg-sub-list) [10531 10556])
                            ("subtractFromRefEnd" variable (:type "int") (reparse-symbol arg-sub-list) [10569 10592])
                            ("substart" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10605 10622])
                            ("subend" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10635 10650])
                            ("cigarstart" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10663 10702])
                            ("cigarend" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10715 10752])
                            ("qsubstart" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10765 10790])
                            ("qsubend" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10803 10826]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10517 10827])
                    ("add" function
                       (:prototype-flag t
                        :arguments 
                          ( ("addToStart" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10842 10861])
                            ("addToEnd" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10874 10891])
                            ("cigarStart" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10904 10943])
                            ("cigarEnd" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10956 10993])
                            ("qaddToStart" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11006 11033])
                            ("qaddToEnd" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11046 11071]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10833 11072])
                    ("subtractFromStart" function
                       (:prototype-flag t
                        :arguments 
                          ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [11102 11109])
                            ("seq" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11110 11122])
                            ("cig" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11123 11155])
                            ("quals" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11156 11177]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11079 11178])
                    ("subtractFromEnd" function
                       (:prototype-flag t
                        :arguments 
                          ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [11204 11211])
                            ("seq" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11212 11224])
                            ("cig" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11225 11257])
                            ("quals" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11258 11279]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11183 11280])
                    ("addToStart" function
                       (:prototype-flag t
                        :arguments 
                          ( ("seq" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11301 11313])
                            ("cig" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11314 11346])
                            ("quals" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11347 11368]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11285 11369])
                    ("addToEnd" function
                       (:prototype-flag t
                        :arguments 
                          ( ("seq" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11388 11400])
                            ("cig" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("pair" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11401 11433])
                            ("quals" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("short" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11434 11455]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11374 11456])
                    ("mergeAllele" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11479 11500])
                            ("newType" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11501 11520]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11462 11521])
                    ("updateTypeAndLengthFromCigar" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11561 11566]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [11527 11567])
                    ("bpLeft" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11583 11588]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [11572 11589])
                    ("bpRight" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11666 11671]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [11654 11672]))                  
                :type "class")
                nil [1501 11737])
            ("AllelePairIntCompare" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [11809 11816])
                    ("()" function
                       (:operator-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("pair" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil)
                                          ("int" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11837 11864])
                            ("b" variable
                               (:reference 1
                                :constant-flag t
                                :type ("pair" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil)
                                          ("int" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11865 11892]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [11821 11936]))                  
                :type "class")
                nil [11780 11939])
            ("AllelePositionCompare" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [11971 11978])
                    ("()" function
                       (:operator-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11999 12015])
                            ("b" variable
                               (:reference 1
                                :constant-flag t
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [12016 12032]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [11983 12080]))                  
                :type "class")
                nil [11941 12083])
            ("updateAllelesCachedData" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12115 12140]))                  
                :type "void")
                nil [12086 12141])
            ("groupAllelesBySample" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12194 12217]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12143 12218])
            ("groupAllelesBySample" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12245 12268])
                    ("groups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12269 12307]))                  
                :type "void")
                nil [12219 12308])
            ("allowedAlleleTypes" function
               (:prototype-flag t
                :arguments 
                  ( ("allowedEnumeratedTypes" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("AlleleType" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12333 12376]))                  
                :type "int")
                nil [12310 12377])
            ("filterAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12397 12420])
                    ("allowedTypes" variable (:type "int") (reparse-symbol arg-sub-list) [12421 12438]))                  
                :type "void")
                nil [12378 12439])
            ("countAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("sampleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12457 12501]))                  
                :type "int")
                nil [12440 12502])
            ("baseCount" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12517 12542])
                    ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12543 12555])
                    ("strand" variable (:type ("AlleleStrand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12556 12576]))                  
                :type "int")
                nil [12503 12577])
            ("baseCount" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12626 12651])
                    ("refbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12652 12667])
                    ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12668 12683]))                  
                :type ("pair" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil)
                          ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12578 12684])
            ("countAllelesWithBase" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12710 12735])
                    ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12736 12748]))                  
                :type "int")
                nil [12685 12749])
            ("areHomozygous" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12770 12795]))                  
                :type "bool")
                nil [12751 12796])
            ("countAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12828 12853]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12798 12854])
            ("countAllelesString" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12891 12916]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12855 12917])
            ("countAllelesString" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12954 12978]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12918 12979])
            ("countAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13010 13034]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [12980 13035])
            ("countAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13066 13089]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [13036 13090])
            ("uniqueAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13121 13144]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [13092 13145])
            ("allelesSameType" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13168 13177])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13177 13179])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13180 13189])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13189 13191]))                  
                :type "bool")
                nil [13147 13192])
            ("allelesEquivalent" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13216 13225])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13225 13227])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13228 13237])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13237 13239]))                  
                :type "bool")
                nil [13193 13240])
            ("allelesSameSample" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13264 13273])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13273 13275])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13276 13285])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13285 13287]))                  
                :type "bool")
                nil [13241 13288])
            ("allelesSameType" function
               (:prototype-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13310 13320])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13321 13331]))                  
                :type "bool")
                nil [13289 13332])
            ("allelesEquivalent" function
               (:prototype-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13356 13366])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13367 13377]))                  
                :type "bool")
                nil [13333 13378])
            ("allelesSameSample" function
               (:prototype-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13402 13412])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13413 13423]))                  
                :type "bool")
                nil [13379 13424])
            ("allelesEqual" function
               (:prototype-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13443 13453])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13454 13464]))                  
                :type "bool")
                nil [13425 13465])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("sampleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13485 13529])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13530 13574]))                  
                :type "void")
                nil [13467 13575])
            ("homogenizeAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13599 13643])
                    ("refseq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13644 13659])
                    ("refallele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13660 13678]))                  
                :type "void")
                nil [13576 13679])
            ("resetProcessedFlag" function
               (:prototype-flag t
                :arguments 
                  ( ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13704 13748]))                  
                :type "void")
                nil [13680 13749])
            ("alleleUnion" function
               (:prototype-flag t
                :arguments 
                  ( ("a1" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13778 13797])
                    ("a2" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13798 13817]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [13751 13818])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [13996 14019])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14020 14037]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [13957 14063])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14103 14125])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14126 14143]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14064 14167])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14206 14231])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14232 14249]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14168 14273])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14312 14336])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14337 14354]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14274 14378])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14417 14456])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14457 14474]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14379 14498])
            ("groupAlleles_copy" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14541 14565])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14566 14583]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14499 14607])
            ("groupAlleles_copy" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14650 14672])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [14673 14690]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14608 14714])
            ("groupAlleles_copy" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14757 14781]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14715 14782])
            ("genotypeAllelesFromAlleleGroups" function
               (:prototype-flag t
                :arguments 
                  ( ("groups" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14830 14862]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14783 14863])
            ("genotypeAllelesFromAlleleGroups" function
               (:prototype-flag t
                :arguments 
                  ( ("groups" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14911 14944]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14864 14945])
            ("genotypeAllelesFromAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14988 15012]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14946 15013])
            ("genotypeAllelesFromAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15056 15081]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [15014 15082])
            ("genotypeAllele" function
               (:prototype-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15105 15115]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [15083 15116])
            ("genotypeAllele" function
               (:prototype-flag t
                :arguments 
                  ( ("type" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15139 15155])
                    ("alt" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15156 15168])
                    ("length" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [15173 15194])
                    ("cigar" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15198 15212])
                    ("reflen" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [15217 15238])
                    ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [15242 15261])
                    ("rrbound" variable (:type "long int") (reparse-symbol arg-sub-list) [15265 15283]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [15117 15287])
            ("isEmptyAllele" function
               (:prototype-flag t
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15308 15329]))                  
                :type "bool")
                nil [15289 15330])
            ("isDividedIndel" function
               (:prototype-flag t
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15351 15372]))                  
                :type "bool")
                nil [15331 15373])
            ("isEmptyAlleleOrIsDividedIndel" function
               (:prototype-flag t
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15409 15430]))                  
                :type "bool")
                nil [15374 15431])
            ("isUnflankedIndel" function
               (:prototype-flag t
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15454 15475]))                  
                :type "bool")
                nil [15432 15476])
            ("referenceLengthFromCigar" function
               (:prototype-flag t
                :arguments 
                  ( ("cigar" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15507 15521]))                  
                :type "int")
                nil [15478 15522]))          
    :file "Allele.h"
    :pointmax 15568
    :fsize 15567
    :lastmodtime '(21565 38081 515450 705000)
    :unmatched-syntax '((number 15284 . 15285) (punctuation 15282 . 15283) (number 15262 . 15263) (punctuation 15260 . 15261) (number 15239 . 15240) (punctuation 15237 . 15238) (string 15213 . 15215) (punctuation 15211 . 15212) (number 15195 . 15196) (punctuation 15193 . 15194) (string 15169 . 15171) (punctuation 15167 . 15168) (semantic-list 14690 . 14712) (semantic-list 14678 . 14690) (semantic-list 14583 . 14605) (semantic-list 14571 . 14583) (semantic-list 14474 . 14496) (semantic-list 14462 . 14474) (semantic-list 14354 . 14376) (semantic-list 14342 . 14354) (semantic-list 14249 . 14271) (semantic-list 14237 . 14249) (semantic-list 14143 . 14165) (semantic-list 14131 . 14143) (semantic-list 14037 . 14061) (semantic-list 14025 . 14037) (punctuation 13284 . 13285) (punctuation 13272 . 13273) (punctuation 13236 . 13237) (punctuation 13224 . 13225) (punctuation 13188 . 13189) (punctuation 13176 . 13177) (number 9218 . 9219) (punctuation 9216 . 9217) (punctuation 7178 . 7179) (number 7159 . 7160) (punctuation 7158 . 7159) (number 7135 . 7136) (punctuation 7134 . 7135) (punctuation 2369 . 2370) (punctuation 2152 . 2153) (punctuation 1548 . 1549))
    :lexical-table 
        '(("_ALLELE_H")
          )

    )
   (semanticdb-table "AlleleParser.h"
    :major-mode 'c-mode
    :tags 
        '( ("_ALLELE_PARSER_H" variable (:constant-flag t) nil [34 50])
            ("iostream" include (:system-flag t) nil [52 71])
            ("fstream" include (:system-flag t) nil [72 90])
            ("string" include (:system-flag t) nil [91 108])
            ("vector" include (:system-flag t) nil [109 126])
            ("map" include (:system-flag t) nil [127 141])
            ("deque" include (:system-flag t) nil [142 158])
            ("utility" include (:system-flag t) nil [159 177])
            ("algorithm" include (:system-flag t) nil [178 198])
            ("time.h" include (:system-flag t) nil [199 216])
            ("assert.h" include (:system-flag t) nil [217 236])
            ("ctype.h" include (:system-flag t) nil [237 255])
            ("cmath" include (:system-flag t) nil [256 272])
            ("split.h" include nil nil [273 291])
            ("join.h" include nil nil [292 309])
            ("api/BamReader.h" include nil nil [310 336])
            ("BedReader.h" include nil nil [337 359])
            ("Parameters.h" include nil nil [360 383])
            ("Utility.h" include nil nil [384 404])
            ("Allele.h" include nil nil [405 424])
            ("Sample.h" include nil nil [425 444])
            ("Fasta.h" include nil nil [445 463])
            ("TryCatch.h" include nil nil [464 485])
            ("api/BamMultiReader.h" include nil nil [486 517])
            ("Genotype.h" include nil nil [518 539])
            ("CNV.h" include nil nil [540 556])
            ("Result.h" include nil nil [557 576])
            ("LeftAlign.h" include nil nil [577 599])
            ("Variant.h" include nil nil [600 620])
            ("version_git.h" include nil nil [621 645])
            ("CACHED_REFERENCE_WINDOW" variable (:constant-flag t) nil [731 754])
            ("CACHED_BASIS_HAPLOTYPE_WINDOW" variable (:constant-flag t) nil [935 964])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [971 991])
            ("BamTools" using (:type ("BamTools" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [992 1017])
            ("RegisteredAlignment" type
               (:members 
                  ( ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1192 1205])
                            ("a" variable
                               (:reference 1
                                :type ("RegisteredAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1206 1229]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1165 1230])
                    ("public" label nil (reparse-symbol classsubparts) [1231 1238])
                    ("start" variable (:type "unsigned int") (reparse-symbol classsubparts) [1278 1297])
                    ("end" variable (:type "unsigned int") (reparse-symbol classsubparts) [1307 1324])
                    ("refid" variable (:type "int") (reparse-symbol classsubparts) [1329 1339])
                    ("name" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1344 1356])
                    ("readgroup" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1361 1378])
                    ("alleles" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("Allele" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [1383 1406])
                    ("mismatches" variable (:type "int") (reparse-symbol classsubparts) [1411 1426])
                    ("snpCount" variable (:type "int") (reparse-symbol classsubparts) [1431 1444])
                    ("indelCount" variable (:type "int") (reparse-symbol classsubparts) [1449 1464])
                    ("alleleTypes" variable (:type "int") (reparse-symbol classsubparts) [1469 1485])
                    ("RegisteredAlignment" function
                       (:constructor-flag t
                        :arguments 
                          ( ("alignment" variable
                               (:reference 1
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1511 1535]))                          
                        :type ("RegisteredAlignment" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1491 1860])
                    ("addAllele" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable (:type ("Allele" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1881 1895])
                            ("mergeComplex" variable (:type "bool") (reparse-symbol arg-sub-list) [1896 1915])
                            ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1916 1921])
                            ("maxComplexGap" variable (:type "int") (reparse-symbol arg-sub-list) [1941 1960])
                            ("boundIndels" variable (:type "bool") (reparse-symbol arg-sub-list) [1964 1982])
                            ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1983 1989]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [1866 1990])
                    ("fitHaplotype" function
                       (:prototype-flag t
                        :arguments 
                          ( ("pos" variable (:type "int") (reparse-symbol arg-sub-list) [2013 2021])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [2022 2042])
                            ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2043 2051])
                            ("" variable (:type ("aptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2052 2057])
                            ("allowPartials" variable (:type "bool") (reparse-symbol arg-sub-list) [2058 2078])
                            ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2079 2085]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1995 2086]))                  
                :type "class")
                nil [1133 2090])
            ("AlleleFilter" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [2174 2181])
                    ("AlleleFilter" function
                       (:constructor-flag t
                        :arguments 
                          ( ("" variable (:type "long") (reparse-symbol arg-sub-list) [2199 2212])
                            ("s" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [2204 2219])
                            ("" variable (:type "long") (reparse-symbol arg-sub-list) [2220 2233])
                            ("e" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [2225 2240]))                          
                        :type ("AlleleFilter" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2186 2262])
                    ("()" function
                       (:operator-flag t
                        :arguments 
                          ( ("a" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2335 2345]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [2319 2424])
                    ("()" function
                       (:operator-flag t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2446 2454])
                            ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2455 2457]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [2430 2539])
                    ("private" label nil (reparse-symbol classsubparts) [2541 2549])
                    ("end" variable (:type "unsigned int") (reparse-symbol classsubparts) [2559 2583])
                    ("start" variable (:type "unsigned int") (reparse-symbol classsubparts) [2559 2583]))                  
                :type "class")
                nil [2152 2587])
            ("AllelePtrCmp" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [2611 2618])
                    ("()" function
                       (:operator-flag t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2639 2648])
                            ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2648 2650])
                            ("" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2651 2660])
                            ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2660 2662]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [2623 2704]))                  
                :type "class")
                nil [2589 2708])
            ("AllelicPrimitive" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [2735 2742])
                    ("alt" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2747 2758])
                    ("ref" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [2763 2774])
                    ("AllelicPrimitive" function
                       (:constructor-flag t
                        :arguments 
                          ( ("r" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2796 2806])
                            ("a" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2807 2817]))                          
                        :type ("AllelicPrimitive" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2779 2841]))                  
                :type "class")
                nil [2710 2844])
            ("<" function
               (:prototype-flag t
                :operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("AllelicPrimitive" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2861 2887])
                    ("b" variable
                       (:reference 1
                        :constant-flag t
                        :type ("AllelicPrimitive" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2888 2914]))                  
                :type "bool")
                nil [2846 2915])
            ("capBaseQuality" function
               (:prototype-flag t
                :arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2937 2961])
                    ("baseQualityCap" variable (:type "int") (reparse-symbol arg-sub-list) [2962 2981]))                  
                :type "void")
                nil [2917 2982])
            ("AlleleParser" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [3007 3014])
                    ("parameters" variable (:type ("Parameters" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3020 3042])
                    ("AlleleParser" function
                       (:prototype-flag t
                        :constructor-flag t
                        :arguments 
                          ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [3126 3135])
                            ("argv" variable
                               (:pointer 2
                                :type "char")
                                (reparse-symbol arg-sub-list) [3136 3148]))                          
                        :type ("AlleleParser" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3113 3149])
                    ("AlleleParser" function
                       (:prototype-flag t
                        :destructor-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3168 3173]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [3154 3174])
                    ("sampleList" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3181 3207])
                    ("sampleListFromBam" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3258 3291])
                    ("sampleListFromVCF" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3332 3365])
                    ("samplePopulation" variable (:type ("map" type
                         (:template-specifier 
                            ( ("string" type nil nil nil)
                              ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3407 3444])
                    ("populationSamples" variable (:type ("map" type
                         (:template-specifier 
                            ( ("string" type nil nil nil)
                              ("vector" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3487 3534])
                    ("readGroupToSampleNames" variable (:type ("map" type
                         (:template-specifier 
                            ( ("string" type nil nil nil)
                              ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3572 3615])
                    ("readGroupToTechnology" variable (:type ("map" type
                         (:template-specifier 
                            ( ("string" type nil nil nil)
                              ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3651 3693])
                    ("sequencingTechnologies" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3734 3772])
                    ("sampleCNV" variable (:type ("CNVMap" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3817 3834])
                    ("reference" variable (:type ("FastaReference" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3857 3882])
                    ("referenceSequenceNames" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3887 3925])
                    ("referenceIDToName" variable (:type ("map" type
                         (:template-specifier 
                            ( ("int" type nil nil nil)
                              ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3930 3965])
                    ("referenceSampleName" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3970 3997])
                    ("targets" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("BedTarget" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [4029 4055])
                    ("inTarget" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4188 4193]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [4174 4194])
                    ("bamMultiReader" variable (:type ("BamMultiReader" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4217 4247])
                    ("bedReader" variable (:type ("BedReader" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4271 4291])
                    ("variantCallFile" variable (:type ("vcf::VariantCallFile" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4308 4345])
                    ("variantCallInputFile" variable (:type ("vcf::VariantCallFile" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4350 4392])
                    ("haplotypeVariantInputFile" variable (:type ("vcf::VariantCallFile" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4444 4491])
                    ("haplotypeBasisAlleles" variable (:type ("map" type
                         (:template-specifier 
                            ( ("long int" type nil nil nil)
                              ("vector" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [4747 4810])
                    ("usingHaplotypeBasisAlleles" variable (:type "bool") (reparse-symbol classsubparts) [4861 4893])
                    ("usingVariantInputAlleles" variable (:type "bool") (reparse-symbol classsubparts) [4898 4928])
                    ("rightmostHaplotypeBasisAllelePosition" variable (:type "long int") (reparse-symbol classsubparts) [4933 4980])
                    ("rightmostInputAllelePosition" variable (:type "long int") (reparse-symbol classsubparts) [4985 5023])
                    ("updateHaplotypeBasisAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [5061 5074])
                            ("referenceLength" variable (:type "int") (reparse-symbol arg-sub-list) [5075 5095]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [5028 5096])
                    ("allowedAllele" function
                       (:prototype-flag t
                        :arguments 
                          ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [5120 5133])
                            ("ref" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5134 5146])
                            ("alt" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5147 5159]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [5101 5160])
                    ("makeAllele" function
                       (:prototype-flag t
                        :arguments 
                          ( ("ra" variable
                               (:reference 1
                                :type ("RegisteredAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5184 5208])
                            ("type" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5217 5233])
                            ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [5242 5255])
                            ("length" variable (:type "int") (reparse-symbol arg-sub-list) [5264 5275])
                            ("basesLeft" variable (:type "int") (reparse-symbol arg-sub-list) [5284 5298])
                            ("basesRight" variable (:type "int") (reparse-symbol arg-sub-list) [5307 5322])
                            ("readSequence" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5331 5352])
                            ("sampleName" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5361 5380])
                            ("alignment" variable
                               (:reference 1
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5389 5413])
                            ("sequencingTech" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5422 5445])
                            ("qual" variable (:type "long double") (reparse-symbol arg-sub-list) [5454 5471])
                            ("qualstr" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [5480 5496]))                          
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5166 5497])
                    ("registeredAlleles" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("Allele" type (:pointer 1) nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [5505 5539])
                    ("registeredAlignments" variable (:type "int") (reparse-symbol classsubparts) [5596 5617])
                    ("inputVariantAlleles" variable (:type ("map" type
                         (:template-specifier 
                            ( ("long int" type nil nil nil)
                              ("vector" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [5622 5673])
                    ("inputGenotypeLikelihoods" variable (:type ("map" type
                         (:template-specifier 
                            ( ("long int" type nil nil nil)
                              ("map" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [5799 5879])
                    ("inputAlleleCounts" variable (:type ("map" type
                         (:template-specifier 
                            ( ("long int" type nil nil nil)
                              ("map" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [5908 5959])
                    ("nullSample" variable
                       (:pointer 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5988 6007])
                    ("addCurrentGenotypeLikelihoods" function
                       (:prototype-flag t
                        :arguments 
                          ( ("genotypesByPloidy" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("int" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [6048 6095])
                            ("sampleDataLikelihoods" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [6108 6169]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6013 6170])
                    ("getInputAlleleCounts" function
                       (:prototype-flag t
                        :arguments 
                          ( ("genotypeAlleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [6202 6234])
                            ("inputAFs" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("int" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [6235 6262]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6176 6263])
                    ("referenceSequences" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("RefData" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [6306 6341])
                    ("bamHeader" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [6596 6613])
                    ("bamHeaderLines" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [6618 6648])
                    ("openBams" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6669 6674]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6655 6675])
                    ("openTraceFile" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6699 6704]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6680 6705])
                    ("openFailedFile" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6730 6735]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6710 6736])
                    ("openOutputFile" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6761 6766]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6741 6767])
                    ("getSampleNames" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6792 6797]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6772 6798])
                    ("getPopulations" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6823 6828]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6803 6829])
                    ("getSequencingTechnologies" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6865 6870]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6834 6871])
                    ("loadSampleCNVMap" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6898 6903]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [6876 6904])
                    ("currentSamplePloidy" function
                       (:prototype-flag t
                        :arguments 
                          ( ("sample" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [6933 6954]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [6909 6955])
                    ("copiesOfLocus" function
                       (:prototype-flag t
                        :arguments 
                          ( ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [6978 6995]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [6960 6996])
                    ("currentPloidies" function
                       (:prototype-flag t
                        :arguments 
                          ( ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7029 7046]))                          
                        :type ("vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [7001 7047])
                    ("loadBamReferenceSequenceNames" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7087 7092]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7052 7093])
                    ("loadFastaReference" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7122 7127]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7098 7128])
                    ("loadReferenceSequence" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("BedTarget" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7160 7171])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [7172 7176])
                            ("" variable (:type "int") (reparse-symbol arg-sub-list) [7177 7181]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7133 7182])
                    ("loadReferenceSequence" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alignment" variable
                               (:reference 1
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7214 7238]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7187 7239])
                    ("preserveReferenceSequenceWindow" function
                       (:prototype-flag t
                        :arguments 
                          ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [7281 7288]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7244 7289])
                    ("extendReferenceSequence" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [7323 7327]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7294 7328])
                    ("extendReferenceSequence" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alignment" variable
                               (:reference 1
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7362 7386]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7333 7387])
                    ("eraseReferenceSequence" function
                       (:prototype-flag t
                        :arguments 
                          ( ("leftErasure" variable (:type "int") (reparse-symbol arg-sub-list) [7420 7436]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7392 7437])
                    ("referenceSubstr" function
                       (:prototype-flag t
                        :arguments 
                          ( ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [7465 7483])
                            ("length" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [7484 7504]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7442 7505])
                    ("loadTargets" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7527 7532]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7510 7533])
                    ("getFirstAlignment" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7561 7566]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [7538 7567])
                    ("getFirstVariant" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7593 7598]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [7572 7599])
                    ("loadTargetsFromBams" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7629 7634]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7604 7635])
                    ("initializeOutputFiles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7667 7672]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7640 7673])
                    ("registerAlignment" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alignment" variable
                               (:reference 1
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7717 7741])
                            ("ra" variable
                               (:reference 1
                                :type ("RegisteredAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7742 7766])
                            ("sampleName" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7767 7786])
                            ("sequencingTech" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [7787 7810]))                          
                        :type ("RegisteredAlignment" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [7678 7811])
                    ("clearRegisteredAlignments" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7847 7852]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7816 7853])
                    ("updateAlignmentQueue" function
                       (:prototype-flag t
                        :arguments 
                          ( ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [7884 7902])
                            ("newAlleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [7903 7931])
                            ("gettingPartials" variable (:type "bool") (reparse-symbol arg-sub-list) [7932 7954])
                            ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7955 7961]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7858 7962])
                    ("updateInputVariants" function
                       (:prototype-flag t
                        :arguments 
                          ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [7992 8005])
                            ("referenceLength" variable (:type "int") (reparse-symbol arg-sub-list) [8006 8026]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [7967 8027])
                    ("updateHaplotypeBasisAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8065 8070]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8032 8071])
                    ("removeAllelesWithoutReadSpan" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8110 8135])
                            ("probeLength" variable (:type "int") (reparse-symbol arg-sub-list) [8136 8152])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [8153 8173]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8076 8174])
                    ("removeNonOverlappingAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8212 8237])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [8275 8296])
                            ("getAllAllelesInHaplotype" variable (:type "bool") (reparse-symbol arg-sub-list) [8337 8368])
                            ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8369 8375]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8179 8376])
                    ("removePreviousAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8408 8433]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8381 8434])
                    ("removeFilteredAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8466 8491]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8439 8492])
                    ("removeDuplicateAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [8525 8542])
                            ("alleleGroups" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8543 8587])
                            ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [8620 8643])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [8644 8664])
                            ("refallele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [8665 8683]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8497 8684])
                    ("updateRegisteredAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8718 8723]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8689 8724])
                    ("addToRegisteredAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [8757 8782]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8729 8783])
                    ("updatePriorAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8812 8817]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [8788 8818])
                    ("targetsInCurrentRefSeq" function
                       (:prototype-flag t
                        :pointer 1
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8865 8870]))                          
                        :type ("vector" type
                             (:template-specifier 
                                ( ("BedTarget" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [8823 8871])
                    ("toNextRefID" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8893 8898]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8876 8899])
                    ("loadTarget" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type ("BedTarget" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [8920 8931]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8904 8932])
                    ("toFirstTargetPosition" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8964 8969]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8937 8970])
                    ("toNextPosition" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8995 9000]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [8975 9001])
                    ("getCompleteObservationsOfHaplotype" function
                       (:prototype-flag t
                        :arguments 
                          ( ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9046 9063])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [9064 9084])
                            ("haplotypeObservations" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [9085 9124]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9006 9125])
                    ("getPartialObservationsOfHaplotype" function
                       (:prototype-flag t
                        :arguments 
                          ( ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9169 9186])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [9187 9207])
                            ("partials" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [9208 9234]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9130 9235])
                    ("dummyProcessNextTarget" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9268 9273]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9240 9274])
                    ("toNextTarget" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9297 9302]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9279 9303])
                    ("setPosition" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "long") (reparse-symbol arg-sub-list) [9325 9338])
                            ("" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [9330 9343]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [9308 9344])
                    ("currentSequencePosition" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alignment" variable
                               (:reference 1
                                :constant-flag t
                                :type ("BamAlignment" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9377 9407]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [9349 9408])
                    ("currentSequencePosition" function
                       (:prototype-flag t
                        :type "int")
                        (reparse-symbol classsubparts) [9413 9443])
                    ("unsetAllProcessedFlags" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9476 9481]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [9448 9482])
                    ("getNextAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allelesBySample" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9507 9532])
                            ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [9533 9556]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [9487 9557])
                    ("buildHaplotypeAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [9759 9783])
                            ("allelesBySample" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [9815 9840])
                            ("alleleGroups" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [9872 9916])
                            ("partialObservationGroups" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10048 10104])
                            ("partialObservationSupport" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil)
                                          ("set" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [10136 10191])
                            ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [10223 10246]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [9732 10247])
                    ("getAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allelesBySample" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10268 10293])
                            ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [10314 10337])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [10358 10379])
                            ("getAllAllelesInHaplotype" variable (:type "bool") (reparse-symbol arg-sub-list) [10403 10434])
                            ("" variable (:type ("false" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10435 10441])
                            ("ignoreProcessedAlleles" variable (:type "bool") (reparse-symbol arg-sub-list) [10462 10491])
                            ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10492 10497]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10252 10498])
                    ("referenceAllele" function
                       (:prototype-flag t
                        :pointer 1
                        :arguments 
                          ( ("mapQ" variable (:type "int") (reparse-symbol arg-sub-list) [10527 10536])
                            ("baseQ" variable (:type "int") (reparse-symbol arg-sub-list) [10537 10547]))                          
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10503 10548])
                    ("alternateAllele" function
                       (:prototype-flag t
                        :pointer 1
                        :arguments 
                          ( ("mapQ" variable (:type "int") (reparse-symbol arg-sub-list) [10577 10586])
                            ("baseQ" variable (:type "int") (reparse-symbol arg-sub-list) [10587 10597]))                          
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10553 10598])
                    ("homopolymerRunLeft" function
                       (:prototype-flag t
                        :arguments 
                          ( ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10626 10641]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [10603 10642])
                    ("homopolymerRunRight" function
                       (:prototype-flag t
                        :arguments 
                          ( ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10671 10686]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [10647 10687])
                    ("repeatCounts" function
                       (:prototype-flag t
                        :arguments 
                          ( ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [10722 10740])
                            ("sequence" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10741 10764])
                            ("maxsize" variable (:type "int") (reparse-symbol arg-sub-list) [10765 10777]))                          
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [10692 10778])
                    ("cachedRepeatCounts" variable (:type ("map" type
                         (:template-specifier 
                            ( ("long int" type nil nil nil)
                              ("map" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [10783 10835])
                    ("isRepeatUnit" function
                       (:prototype-flag t
                        :arguments 
                          ( ("seq" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10888 10906])
                            ("unit" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [10907 10926]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [10870 10927])
                    ("setupVCFOutput" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10952 10957]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10932 10958])
                    ("setupVCFInput" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10982 10987]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [10963 10988])
                    ("vcfHeader" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11010 11015]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [10993 11016])
                    ("hasInputVariantAllelesAtCurrentPosition" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11066 11071]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [11021 11072])
                    ("genotypeAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleleGroups" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [11260 11304])
                            ("samples" variable
                               (:reference 1
                                :type ("Samples" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [11340 11357])
                            ("useOnlyInputAlleles" variable (:type "bool") (reparse-symbol arg-sub-list) [11393 11418])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [11454 11475]))                          
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [11229 11479])
                    ("fastaReferenceSequenceCount" variable (:type "int") (reparse-symbol classsubparts) [11531 11563])
                    ("hasTarget" variable (:type "bool") (reparse-symbol classsubparts) [11601 11616])
                    ("currentTarget" variable
                       (:pointer 1
                        :type ("BedTarget" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11621 11646])
                    ("currentPosition" variable (:type "long int") (reparse-symbol classsubparts) [11651 11676])
                    ("lastHaplotypeLength" variable (:type "int") (reparse-symbol classsubparts) [11710 11734])
                    ("currentReferenceBase" variable (:type "char") (reparse-symbol classsubparts) [11739 11765])
                    ("currentSequence" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11770 11793])
                    ("currentReferenceBaseChar" function
                       (:prototype-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [11798 11830])
                    ("currentReferenceBaseString" function
                       (:prototype-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11835 11871])
                    ("currentReferenceBaseIterator" function
                       (:prototype-flag t
                        :type ("string::iterator" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11876 11924])
                    ("currentReferenceHaplotype" function
                       (:prototype-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [11929 11964])
                    ("failedFile" variable (:type ("ofstream" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11990 12042])
                    ("traceFile" variable (:type ("ofstream" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11990 12042])
                    ("outputFile" variable (:type ("ofstream" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11990 12042])
                    ("logFile" variable (:type ("ofstream" type (:type "class") nil nil)) (reparse-symbol classsubparts) [11990 12042])
                    ("output" variable
                       (:pointer 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12047 12063])
                    ("isCpG" function
                       (:prototype-flag t
                        :arguments 
                          ( ("altbase" variable
                               (:reference 1
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [12095 12111]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [12084 12112])
                    ("currentSequenceName" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol classsubparts) [12118 12145])
                    ("private" label nil (reparse-symbol classsubparts) [12147 12155])
                    ("justSwitchedTargets" variable (:type "bool") (reparse-symbol classsubparts) [12161 12186])
                    ("currentReferenceAllele" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12267 12298])
                    ("currentAlternateAllele" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12303 12334])
                    ("currentSequenceStart" variable (:type "long int") (reparse-symbol classsubparts) [12379 12409])
                    ("hasMoreAlignments" variable (:type "bool") (reparse-symbol classsubparts) [12415 12438])
                    ("hasMoreVariants" variable (:type "bool") (reparse-symbol classsubparts) [12443 12464])
                    ("oneSampleAnalysis" variable (:type "bool") (reparse-symbol classsubparts) [12471 12494])
                    ("basesBeforeCurrentTarget" variable (:type "int") (reparse-symbol classsubparts) [12579 12608])
                    ("basesAfterCurrentTarget" variable (:type "int") (reparse-symbol classsubparts) [12684 12712])
                    ("currentRefID" variable (:type "int") (reparse-symbol classsubparts) [12790 12807])
                    ("currentAlignment" variable (:type ("BamAlignment" type (:type "class") nil nil)) (reparse-symbol classsubparts) [12812 12842])
                    ("currentVariant" variable
                       (:pointer 1
                        :type ("vcf::Variant" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [12847 12876]))                  
                :type "class")
                nil [2985 12880]))          
    :file "AlleleParser.h"
    :pointmax 12889
    :fsize 12888
    :lastmodtime '(21565 38081 516450 657000)
    :unmatched-syntax '((punctuation 12464 . 12465) (number 11476 . 11477) (punctuation 11474 . 11475) (punctuation 10490 . 10491) (punctuation 10433 . 10434) (number 10380 . 10381) (punctuation 10378 . 10379) (punctuation 8367 . 8368) (number 8297 . 8298) (punctuation 8295 . 8296) (punctuation 7953 . 7954) (punctuation 5594 . 5595) (punctuation 5592 . 5593) (symbol 5573 . 5592) (punctuation 5572 . 5573) (symbol 5567 . 5572) (punctuation 5565 . 5566) (INT 5562 . 5565) (UNSIGNED 5553 . 5561) (LONG 5548 . 5552) (punctuation 5547 . 5548) (symbol 5544 . 5547) (punctuation 2659 . 2660) (punctuation 2647 . 2648) (LONG 2554 . 2558) (punctuation 2453 . 2454) (punctuation 2077 . 2078) (punctuation 2050 . 2051) (punctuation 1981 . 1982) (number 1961 . 1962) (punctuation 1959 . 1960) (punctuation 1914 . 1915) (LONG 1302 . 1306) (LONG 1273 . 1277))
    :lexical-table 
        '(("_ALLELE_PARSER_H")
          ("CACHED_REFERENCE_WINDOW" . ((number "300" 755 . 758)))
          ("CACHED_BASIS_HAPLOTYPE_WINDOW" . ((number "1000" 965 . 969)))
          )

    )
   (semanticdb-table "split.h"
    :file "split.h"
    :fsize 781
    :lastmodtime '(21565 38081 543449 368000)
    )
   (semanticdb-table "multichoose.h"
    :major-mode 'c-mode
    :tags 
        '( ("__MULTICHOOSE_H" variable (:constant-flag t) nil [33 48])
            ("multichoose" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type ("std::vector" type
                     (:template-specifier 
                        ( ("std::vector" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :arguments 
                  ( ("k" variable (:type "int") (reparse-symbol arg-sub-list) [1376 1382])
                    ("objects" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1383 1407]))                  )
                nil [1315 2155]))          
    :file "multichoose.h"
    :pointmax 2164
    :fsize 2163
    :lastmodtime '(21565 38081 543449 368000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("__MULTICHOOSE_H")
          )

    )
   (semanticdb-table "multipermute.h"
    :major-mode 'c-mode
    :tags 
        '( ("vector" include (:system-flag t) nil [1357 1374])
            ("algorithm" include (:system-flag t) nil [1375 1395])
            ("ListElement" type
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type "class"
                :members 
                  ( ("public" label nil (reparse-symbol classsubparts) [1438 1445])
                    ("value" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1450 1458])
                    ("next" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [1463 1484])
                    ("ListElement" function
                       (:template-specifier 
                          ( ("T" type nil nil nil))                          
                        :constructor-flag t
                        :type ("ListElement" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1490 1510])
                    ("ListElement" function
                       (:template-specifier 
                          ( ("T" type nil nil nil))                          
                        :constructor-flag t
                        :arguments 
                          ( ("val" variable (:type ("T" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1531 1537])
                            ("n" variable
                               (:pointer 1
                                :type ("ListElement" type
                                     (:template-specifier 
                                        ( ("T" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1538 1556]))                          
                        :type ("ListElement" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1516 1603])
                    ("nth" function
                       (:pointer 1
                        :arguments 
                          ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [1629 1635]))                          
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [1609 1809])
                    ("ListElement" function
                       (:template-specifier 
                          ( ("T" type nil nil nil))                          
                        :destructor-flag t
                        :type "void")
                        (reparse-symbol classsubparts) [1815 1903]))                  )
                nil [1397 1907])
            ("list_init" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type ("ListElement" type
                     (:template-specifier 
                        ( ("T" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :arguments 
                  ( ("multiset" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1954 1979]))                  
                :pointer 1)
                nil [1909 2324])
            ("linked_list_to_vector" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type ("std::vector" type
                     (:template-specifier 
                        ( ("T" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :arguments 
                  ( ("h" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2382 2400]))                  )
                nil [2326 2549])
            ("multipermute" function
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type ("std::vector" type
                     (:template-specifier 
                        ( ("std::vector" type nil nil nil))                        
                      :type "class")
                      nil nil)
                :arguments 
                  ( ("multiset" variable
                       (:reference 1
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2679 2704]))                  )
                nil [2617 3445])
            ("MultisetPermutations" type
               (:template 
                  ( ("T" type (:type "class") nil nil))                  
                :type "class"
                :members 
                  ( ("public" label nil (reparse-symbol classsubparts) [3497 3504])
                    ("multiset" variable (:type ("std::vector" type
                         (:template-specifier 
                            ( ("T" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [3510 3534])
                    ("t" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3539 3573])
                    ("s" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3539 3573])
                    ("j" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3539 3573])
                    ("i" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3539 3573])
                    ("h" variable
                       (:pointer 1
                        :type ("ListElement" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3539 3573])
                    ("firstPermutation" variable (:type "bool") (reparse-symbol classsubparts) [3578 3600])
                    ("MultisetPermutations" function
                       (:constructor-flag t
                        :arguments 
                          ( ("m_multiset" variable
                               (:reference 1
                                :type ("std::vector" type
                                     (:template-specifier 
                                        ( ("T" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [3627 3654]))                          
                        :type ("MultisetPermutations" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [3606 3845])
                    ("next" function
                       (:arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3871 3876]))                          
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("T" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [3851 4524])
                    ("MultisetPermutations" function
                       (:destructor-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4552 4557]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [4530 4583]))                  )
                nil [3448 4587]))          
    :file "multipermute.h"
    :pointmax 4588
    :fsize 4587
    :lastmodtime '(21565 38081 543449 368000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "freebayes.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("iostream" include (:system-flag t) nil [107 126])
            ("fstream" include (:system-flag t) nil [127 145])
            ("string" include (:system-flag t) nil [146 163])
            ("vector" include (:system-flag t) nil [164 181])
            ("map" include (:system-flag t) nil [182 196])
            ("iterator" include (:system-flag t) nil [197 216])
            ("algorithm" include (:system-flag t) nil [217 237])
            ("cmath" include (:system-flag t) nil [238 254])
            ("time.h" include (:system-flag t) nil [255 272])
            ("float.h" include (:system-flag t) nil [273 291])
            ("api/BamReader.h" include nil nil [314 340])
            ("Fasta.h" include nil nil [341 359])
            ("TryCatch.h" include nil nil [360 381])
            ("Parameters.h" include nil nil [382 405])
            ("Allele.h" include nil nil [406 425])
            ("Sample.h" include nil nil [426 445])
            ("AlleleParser.h" include nil nil [446 471])
            ("Utility.h" include nil nil [472 492])
            ("SegfaultHandler.h" include nil nil [493 521])
            ("multichoose.h" include nil nil [523 547])
            ("multipermute.h" include nil nil [548 573])
            ("Genotype.h" include nil nil [575 596])
            ("DataLikelihood.h" include nil nil [597 624])
            ("Marginals.h" include nil nil [625 647])
            ("ResultData.h" include nil nil [648 671])
            ("Bias.h" include nil nil [673 690])
            ("Contamination.h" include nil nil [691 717])
            ("DEBUG" variable (:constant-flag t) nil [789 794])
            ("DEBUG2" variable (:constant-flag t) nil [990 996])
            ("ERROR" variable (:constant-flag t) nil [1045 1050])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [1085 1105])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [1137 1146])
                    ("argv" variable
                       (:pointer 1
                        :dereference 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [1147 1160]))                  
                :type "int")
                nil [1127 32501]))          
    :file "freebayes.cpp"
    :pointmax 32502
    :fsize 32501
    :lastmodtime '(21565 38081 543449 368000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("DEBUG2" (spp-arg-list ("msg") 996 . 1001))
          ("ERROR" (spp-arg-list ("msg") 1050 . 1055) . 
              ((symbol "cerr" 1062 . 1066) (punctuation "<" 1067 . 1068) (punctuation "<" 1068 . 1069) (symbol "msg" 1070 . 1073) (punctuation "<" 1074 . 1075) (punctuation "<" 1075 . 1076) (symbol "endl" 1077 . 1081) (punctuation ";" 1081 . 1082)))
          ("DEBUG" (spp-arg-list ("msg") 794 . 799) . 
              ((IF "if" 806 . 808) (semantic-list "(parameters.debug)" 809 . 827) (semantic-list "{ cerr << msg << endl; }" 828 . 852)))
          )

    )
   (semanticdb-table "Sample.h"
    :major-mode 'c-mode
    :tags 
        '( ("__SAMPLE_H" variable (:constant-flag t) nil [28 38])
            ("string" include (:system-flag t) nil [40 57])
            ("vector" include (:system-flag t) nil [58 75])
            ("map" include (:system-flag t) nil [76 90])
            ("utility" include (:system-flag t) nil [91 109])
            ("Utility.h" include nil nil [110 130])
            ("Allele.h" include nil nil [131 150])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [152 172])
            ("StrandBaseCounts" type
               (:members 
                  ( ("public" label nil (reparse-symbol classsubparts) [200 207])
                    ("forwardRef" variable (:type "int") (reparse-symbol classsubparts) [212 227])
                    ("forwardAlt" variable (:type "int") (reparse-symbol classsubparts) [232 247])
                    ("reverseRef" variable (:type "int") (reparse-symbol classsubparts) [252 267])
                    ("reverseAlt" variable (:type "int") (reparse-symbol classsubparts) [272 287])
                    ("StrandBaseCounts" function
                       (:constructor-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [306 311]))                          
                        :type ("StrandBaseCounts" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [289 384])
                    ("StrandBaseCounts" function
                       (:constructor-flag t
                        :arguments 
                          ( ("fr" variable (:type "int") (reparse-symbol arg-sub-list) [403 410])
                            ("fa" variable (:type "int") (reparse-symbol arg-sub-list) [428 435])
                            ("rr" variable (:type "int") (reparse-symbol arg-sub-list) [453 460])
                            ("ra" variable (:type "int") (reparse-symbol arg-sub-list) [478 485]))                          
                        :type ("StrandBaseCounts" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [386 585]))                  
                :type "class")
                nil [174 589])
            ("Sample" type
               (:superclasses 
                  ( ("map" type
                       (:protection "public"
                        :type "class")
                        nil nil))                  
                :members 
                  ( ("<<" function
                       (:prototype-flag t
                        :operator-flag t
                        :typemodifiers ("friend")
                        :arguments 
                          ( ("out" variable
                               (:reference 1
                                :type ("ostream" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [715 728])
                            ("sample" variable
                               (:reference 1
                                :type ("Sample" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [729 744]))                          
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [688 745])
                    ("public" label nil (reparse-symbol classsubparts) [747 754])
                    ("supportedAlleles" variable (:type ("set" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [849 878])
                    ("setSupportedAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [908 913]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [883 914])
                    ("partialSupport" variable (:type ("map" type
                         (:template-specifier 
                            ( ("string" type nil nil nil)
                              ("vector" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [1023 1068])
                    ("reversePartials" variable (:type ("map" type
                         (:template-specifier 
                            ( ("Allele" type (:pointer 1) nil nil)
                              ("set" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol classsubparts) [1132 1176])
                    ("clearPartialObservations" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1235 1240]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [1205 1241])
                    ("observationSupports" function
                       (:prototype-flag t
                        :arguments 
                          ( ("obs" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1477 1489])
                            ("allele" variable
                               (:pointer 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1490 1505]))                          
                        :type "bool")
                        (reparse-symbol classsubparts) [1452 1506])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1583 1598]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [1562 1599])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1640 1655]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [1604 1656])
                    ("partialObservationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1692 1707]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [1661 1708])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1783 1802]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [1762 1803])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1844 1863]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [1808 1864])
                    ("partialObservationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1900 1919]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [1869 1920])
                    ("partialObservationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1953 1958]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [1925 1959])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2026 2031]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [2005 2032])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2070 2075]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [2037 2076])
                    ("qualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2171 2186]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [2159 2187])
                    ("qualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2204 2223]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [2192 2224])
                    ("partialQualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2251 2266]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [2229 2267])
                    ("partialQualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [2294 2313]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [2272 2314])
                    ("sortReferenceAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2470 2475]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [2444 2476])
                    ("strandBaseCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("refbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2515 2530])
                            ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2531 2546]))                          
                        :type ("StrandBaseCounts" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2482 2547])
                    ("baseCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2567 2579])
                            ("strand" variable (:type ("AlleleStrand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2580 2600]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [2553 2601])
                    ("json" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2619 2624]))                          
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [2607 2625]))                  
                :type "class")
                nil [629 2629])
            ("Samples" type
               (:superclasses 
                  ( ("map" type
                       (:protection "public"
                        :type "class")
                        nil nil))                  
                :members 
                  ( ("public" label nil (reparse-symbol classsubparts) [2676 2683])
                    ("estimatedAlleleFrequencies" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2735 2740]))                          
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol classsubparts) [2688 2741])
                    ("assignPartialSupport" function
                       (:prototype-flag t
                        :arguments 
                          ( ("alleles" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2772 2796])
                            ("partialObservations" variable
                               (:reference 1
                                :type ("vector" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2827 2864])
                            ("partialObservationGroups" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("string" type nil nil nil)
                                          ("vector" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2895 2951])
                            ("partialObservationSupport" variable
                               (:reference 1
                                :type ("map" type
                                     (:template-specifier 
                                        ( ("Allele" type (:pointer 1) nil nil)
                                          ("set" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [2982 3037])
                            ("haplotypeStart" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [3068 3097])
                            ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [3128 3148]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [2746 3149])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3176 3181]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [3155 3182])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3223 3228]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3187 3229])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3256 3271]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [3235 3272])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3313 3328]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3277 3329])
                    ("partialObservationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3365 3380]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3334 3381])
                    ("observationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3408 3427]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [3387 3428])
                    ("observationCountInclPartials" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3469 3488]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3433 3489])
                    ("partialObservationCount" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3525 3544]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3494 3545])
                    ("qualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3563 3578]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [3551 3579])
                    ("qualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3596 3615]))                          
                        :type "int")
                        (reparse-symbol classsubparts) [3584 3616])
                    ("partialQualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("allele" variable
                               (:reference 1
                                :type ("Allele" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3643 3658]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3621 3659])
                    ("partialQualSum" function
                       (:prototype-flag t
                        :arguments 
                          ( ("base" variable
                               (:reference 1
                                :constant-flag t
                                :type ("string" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [3686 3705]))                          
                        :type "double")
                        (reparse-symbol classsubparts) [3664 3706])
                    ("clearFullObservations" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3739 3744]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [3712 3745])
                    ("clearPartialObservations" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3780 3785]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [3750 3786])
                    ("setSupportedAlleles" function
                       (:prototype-flag t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3816 3821]))                          
                        :type "void")
                        (reparse-symbol classsubparts) [3791 3822]))                  
                :type "class")
                nil [2631 3825])
            ("countAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3846 3863]))                  
                :type "int")
                nil [3829 3864])
            ("groupAlleles" function
               (:prototype-flag t
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3904 3921])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3922 3966]))                  
                :type "void")
                nil [3886 3967])
            ("sufficientAlternateObservations" function
               (:prototype-flag t
                :arguments 
                  ( ("observations" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4048 4070])
                    ("mincount" variable (:type "int") (reparse-symbol arg-sub-list) [4071 4084])
                    ("minfraction" variable (:type "float") (reparse-symbol arg-sub-list) [4085 4103]))                  
                :type "bool")
                nil [4011 4104]))          
    :file "Sample.h"
    :pointmax 4114
    :fsize 4113
    :lastmodtime '(21565 38081 522450 371000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("__SAMPLE_H")
          )

    )
   (semanticdb-table "Utility.h"
    :file "Utility.h"
    :fsize 4876
    :lastmodtime '(21565 38081 541449 463000)
    )
   (semanticdb-table "SegfaultHandler.h"
    :file "SegfaultHandler.h"
    :fsize 174
    :lastmodtime '(21565 38081 522450 371000)
    )
   (semanticdb-table "Genotype.h"
    :file "Genotype.h"
    :fsize 15049
    :lastmodtime '(21565 38081 519450 514000)
    )
   (semanticdb-table "DataLikelihood.h"
    :major-mode 'c-mode
    :tags 
        '( ("__DATALIKELIHOOD_H" variable (:constant-flag t) nil [36 54])
            ("iostream" include (:system-flag t) nil [56 75])
            ("vector" include (:system-flag t) nil [76 93])
            ("utility" include (:system-flag t) nil [94 112])
            ("algorithm" include (:system-flag t) nil [121 141])
            ("numeric" include (:system-flag t) nil [142 160])
            ("vector" include (:system-flag t) nil [161 178])
            ("iterator" include (:system-flag t) nil [179 198])
            ("cmath" include (:system-flag t) nil [199 215])
            ("Allele.h" include nil nil [216 235])
            ("Sample.h" include nil nil [236 255])
            ("Genotype.h" include nil nil [256 277])
            ("Utility.h" include nil nil [278 298])
            ("Multinomial.h" include nil nil [299 323])
            ("Dirichlet.h" include nil nil [324 346])
            ("Bias.h" include nil nil [347 364])
            ("Contamination.h" include nil nil [365 391])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [393 413])
            ("probObservedAllelesGivenGenotype" function
               (:prototype-flag t
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [469 484])
                    ("genotype" variable
                       (:reference 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [493 512])
                    ("dependenceFactor" variable (:type "double") (reparse-symbol arg-sub-list) [521 545])
                    ("useMapQ" variable (:type "bool") (reparse-symbol arg-sub-list) [554 567])
                    ("observationBias" variable
                       (:reference 1
                        :type ("Bias" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [576 598])
                    ("standardGLs" variable (:type "bool") (reparse-symbol arg-sub-list) [607 624])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [633 665])
                    ("contaminations" variable
                       (:reference 1
                        :type ("Contamination" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [674 704])
                    ("freqs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [713 740]))                  
                :type "long double")
                nil [415 741])
            ("probObservedAllelesGivenGenotypes" function
               (:prototype-flag t
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [824 839])
                    ("genotypes" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Genotype" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [848 877])
                    ("dependenceFactor" variable (:type "double") (reparse-symbol arg-sub-list) [886 910])
                    ("useMapQ" variable (:type "bool") (reparse-symbol arg-sub-list) [919 932])
                    ("observationBias" variable
                       (:reference 1
                        :type ("Bias" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [941 963])
                    ("standardGLs" variable (:type "bool") (reparse-symbol arg-sub-list) [972 989])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [998 1030])
                    ("contaminations" variable
                       (:reference 1
                        :type ("Contamination" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1039 1069])
                    ("freqs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1078 1105]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [743 1106]))          
    :file "DataLikelihood.h"
    :pointmax 1115
    :fsize 1114
    :lastmodtime '(21565 38081 518450 562000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("__DATALIKELIHOOD_H")
          )

    )
   (semanticdb-table "Marginals.h"
    :file "Marginals.h"
    :fsize 825
    :lastmodtime '(21565 38081 520450 466000)
    )
   (semanticdb-table "ResultData.h"
    :file "ResultData.h"
    :fsize 1998
    :lastmodtime '(21565 38081 521450 419000)
    )
   (semanticdb-table "Bias.h"
    :file "Bias.h"
    :fsize 426
    :lastmodtime '(21565 38081 517450 610000)
    )
   (semanticdb-table "Contamination.h"
    :file "Contamination.h"
    :fsize 1066
    :lastmodtime '(21565 38081 517450 610000)
    )
   (semanticdb-table "AlleleParser.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("AlleleParser.h" include nil nil [1 26])
            ("multichoose.h" include nil nil [27 51])
            ("multipermute.h" include nil nil [402 427])
            ("DEBUG" variable (:constant-flag t) nil [498 503])
            ("DEBUG2" variable (:constant-flag t) nil [699 705])
            ("ERROR" variable (:constant-flag t) nil [754 759])
            ("WARNING" variable (:constant-flag t) nil [854 861])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [921 941])
            ("openBams" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [995 1000]))                  
                :type "void")
                nil [967 3067])
            ("openTraceFile" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3102 3107]))                  
                :type "void")
                nil [3069 3415])
            ("openFailedFile" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3451 3456]))                  
                :type "void")
                nil [3417 3801])
            ("openOutputFile" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3837 3842]))                  
                :type "void")
                nil [3803 4234])
            ("getSequencingTechnologies" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4281 4286]))                  
                :type "void")
                nil [4236 6332])
            ("getPopulations" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6368 6373]))                  
                :type "void")
                nil [6334 7950])
            ("getSampleNames" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8052 8057]))                  
                :type "void")
                nil [8018 14494])
            ("vcfHeader" function
               (:parent "AlleleParser"
                :type ("string" type (:type "class") nil nil))
                nil [14496 31311])
            ("setupVCFOutput" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31348 31353]))                  
                :type "void")
                nil [31314 31439])
            ("setupVCFInput" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31474 31479]))                  
                :type "void")
                nil [31441 32622])
            ("loadBamReferenceSequenceNames" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [32673 32678]))                  
                :type "void")
                nil [32624 33275])
            ("loadFastaReference" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [33316 33321]))                  
                :type "void")
                nil [33278 33790])
            ("loadReferenceSequence" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33911 33935]))                  
                :type "void")
                nil [33870 34522])
            ("loadReferenceSequence" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("target" variable
                       (:pointer 1
                        :type ("BedTarget" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [34783 34801])
                    ("before" variable (:type "int") (reparse-symbol arg-sub-list) [34802 34813])
                    ("after" variable (:type "int") (reparse-symbol arg-sub-list) [34814 34824]))                  
                :type "void")
                nil [34742 35337])
            ("extendReferenceSequence" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("rightExtension" variable (:type "int") (reparse-symbol arg-sub-list) [35495 35514]))                  
                :type "void")
                nil [35452 35845])
            ("preserveReferenceSequenceWindow" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [35999 36006]))                  
                :type "void")
                nil [35948 37297])
            ("extendReferenceSequence" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37421 37445]))                  
                :type "void")
                nil [37378 38427])
            ("eraseReferenceSequence" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("leftErasure" variable (:type "int") (reparse-symbol arg-sub-list) [38471 38487]))                  
                :type "void")
                nil [38429 38670])
            ("loadTargets" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [38703 38708]))                  
                :type "void")
                nil [38672 42696])
            ("loadTargetsFromBams" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [42737 42742]))                  
                :type "void")
                nil [42698 43395])
            ("loadSampleCNVMap" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [43433 43438]))                  
                :type "void")
                nil [43397 44291])
            ("currentSamplePloidy" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44331 44352]))                  
                :type "int")
                nil [44293 44431])
            ("copiesOfLocus" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44465 44482]))                  
                :type "int")
                nil [44433 44690])
            ("currentPloidies" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44734 44751]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [44692 45227])
            ("inTarget" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [45343 45348]))                  
                :type "bool")
                nil [45315 45649])
            ("AlleleParser" function
               (:constructor-flag t
                :parent "AlleleParser"
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [45764 45773])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [45774 45786]))                  
                :type ("AlleleParser" type (:type "class") nil nil))
                nil [45737 47325])
            ("AlleleParser" function
               (:destructor-flag t
                :parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [47355 47360]))                  
                :type "void")
                nil [47327 47594])
            ("currentSequencePosition" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :constant-flag t
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47692 47722]))                  
                :type "int")
                nil [47650 47780])
            ("currentSequencePosition" function
               (:parent "AlleleParser"
                :type "int")
                nil [47845 47943])
            ("currentReferenceBaseChar" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [47989 47994]))                  
                :type "char")
                nil [47945 48051])
            ("currentReferenceBaseString" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [48101 48106]))                  
                :type ("string" type (:type "class") nil nil))
                nil [48053 48195])
            ("currentReferenceBaseIterator" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [48257 48262]))                  
                :type ("string::iterator" type (:type "class") nil nil))
                nil [48197 48352])
            ("currentReferenceHaplotype" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [48401 48406]))                  
                :type ("string" type (:type "class") nil nil))
                nil [48354 48513])
            ("referenceSubstr" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [48552 48565])
                    ("len" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [48566 48583]))                  
                :type ("string" type (:type "class") nil nil))
                nil [48515 48673])
            ("isCpG" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("altbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [48700 48716]))                  
                :type "bool")
                nil [48675 49565])
            ("capBaseQuality" function
               (:arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [49587 49611])
                    ("baseQualityCap" variable (:type "int") (reparse-symbol arg-sub-list) [49612 49631]))                  
                :type "void")
                nil [49567 49897])
            ("addAllele" function
               (:parent "RegisteredAlignment"
                :arguments 
                  ( ("newAllele" variable (:type ("Allele" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49935 49952])
                    ("mergeComplex" variable (:type "bool") (reparse-symbol arg-sub-list) [49953 49971])
                    ("maxComplexGap" variable (:type "int") (reparse-symbol arg-sub-list) [49972 49990])
                    ("boundIndels" variable (:type "bool") (reparse-symbol arg-sub-list) [49991 50008]))                  
                :type "void")
                nil [49899 56906])
            ("updateHaplotypeBasisAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [57044 57057])
                    ("referenceLength" variable (:type "int") (reparse-symbol arg-sub-list) [57058 57078]))                  
                :type "void")
                nil [56997 59673])
            ("allowedAllele" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [59709 59722])
                    ("ref" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59723 59735])
                    ("alt" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59736 59748]))                  
                :type "bool")
                nil [59676 60672])
            ("makeAllele" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("ra" variable
                       (:reference 1
                        :type ("RegisteredAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60706 60730])
                    ("type" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60763 60779])
                    ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [60812 60825])
                    ("length" variable (:type "int") (reparse-symbol arg-sub-list) [60858 60869])
                    ("basesLeft" variable (:type "int") (reparse-symbol arg-sub-list) [60902 60916])
                    ("basesRight" variable (:type "int") (reparse-symbol arg-sub-list) [60949 60964])
                    ("readSequence" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60997 61018])
                    ("sampleName" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61051 61070])
                    ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61103 61127])
                    ("sequencingTech" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61160 61183])
                    ("qual" variable (:type "long double") (reparse-symbol arg-sub-list) [61216 61233])
                    ("qualstr" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61266 61287]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [60674 67954])
            ("registerAlignment" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68009 68033])
                    ("ra" variable
                       (:reference 1
                        :type ("RegisteredAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68034 68058])
                    ("sampleName" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68059 68078])
                    ("sequencingTech" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68079 68102]))                  
                :type ("RegisteredAlignment" type (:type "class") nil nil))
                nil [67956 93648])
            ("updateAlignmentQueue" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [93691 93709])
                    ("newAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [93750 93778])
                    ("gettingPartials" variable (:type "bool") (reparse-symbol arg-sub-list) [93819 93840]))                  
                :type "void")
                nil [93651 100943])
            ("addToRegisteredAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [100987 101012]))                  
                :type "void")
                nil [100945 101161])
            ("updateRegisteredAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [101299 101304]))                  
                :type "void")
                nil [101256 102642])
            ("updateInputVariants" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [102683 102696])
                    ("referenceLength" variable (:type "int") (reparse-symbol arg-sub-list) [102697 102717]))                  
                :type "void")
                nil [102644 116690])
            ("addCurrentGenotypeLikelihoods" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("genotypesByPloidy" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("int" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [116741 116788])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [116793 116854]))                  
                :type "void")
                nil [116692 118983])
            ("getInputAlleleCounts" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [119026 119058])
                    ("inputACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [119059 119086]))                  
                :type "void")
                nil [118986 119647])
            ("removeAllelesWithoutReadSpan" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [122050 122075])
                    ("probeLength" variable (:type "int") (reparse-symbol arg-sub-list) [122076 122092])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [122093 122113]))                  
                :type "void")
                nil [122002 123127])
            ("removeNonOverlappingAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [123176 123201])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [123202 123222])
                    ("getAllAllelesInHaplotype" variable (:type "bool") (reparse-symbol arg-sub-list) [123223 123253]))                  
                :type "void")
                nil [123129 124957])
            ("removeFilteredAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [125125 125150]))                  
                :type "void")
                nil [125084 125541])
            ("removePreviousAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [125584 125609]))                  
                :type "void")
                nil [125543 125968])
            ("toNextTarget" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [126328 126333]))                  
                :type "bool")
                nil [126296 129020])
            ("loadTarget" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("target" variable
                       (:pointer 1
                        :type ("BedTarget" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [129173 129191]))                  
                :type "bool")
                nil [129143 131032])
            ("getFirstAlignment" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [131071 131076]))                  
                :type "bool")
                nil [131034 131881])
            ("getFirstVariant" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [131918 131923]))                  
                :type "bool")
                nil [131883 132336])
            ("clearRegisteredAlignments" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [132383 132388]))                  
                :type "void")
                nil [132338 132515])
            ("toNextPosition" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [133258 133263]))                  
                :type "bool")
                nil [133224 138761])
            ("dummyProcessNextTarget" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [138861 138866]))                  
                :type "bool")
                nil [138819 139060])
            ("removeDuplicateAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139104 139121])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [139122 139166])
                    ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [139167 139190])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [139191 139211])
                    ("refallele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [139212 139230]))                  
                :type "void")
                nil [139062 140054])
            ("fitHaplotype" function
               (:parent "RegisteredAlignment"
                :arguments 
                  ( ("haplotypeStart" variable (:type "int") (reparse-symbol arg-sub-list) [140395 140414])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [140415 140435])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [140436 140444])
                    ("" variable (:type ("aptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140445 140450])
                    ("allowPartials" variable (:type "bool") (reparse-symbol arg-sub-list) [140451 140470]))                  
                :type "bool")
                nil [140356 147030])
            ("buildHaplotypeAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [147078 147102])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [147107 147124])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [147129 147173])
                    ("partialObservationGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [147251 147307])
                    ("partialObservationSupport" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil)
                                  ("set" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [147312 147367])
                    ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [147372 147395]))                  
                :type "void")
                nil [147032 165254])
            ("getCompleteObservationsOfHaplotype" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [165310 165327])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [165328 165348])
                    ("haplotypeObservations" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [165349 165388]))                  
                :type "bool")
                nil [165256 166841])
            ("unsetAllProcessedFlags" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [166885 166890]))                  
                :type "void")
                nil [166843 167460])
            ("getPartialObservationsOfHaplotype" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [167635 167652])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [167653 167673])
                    ("partials" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [167674 167700]))                  
                :type "bool")
                nil [167582 169740])
            ("getNextAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [169776 169793])
                    ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [169794 169817]))                  
                :type "bool")
                nil [169742 170256])
            ("getAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [170288 170305])
                    ("allowedAlleleTypes" variable (:type "int") (reparse-symbol arg-sub-list) [170306 170329])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [170360 170380])
                    ("getAllAllelesInHaplotype" variable (:type "bool") (reparse-symbol arg-sub-list) [170381 170411])
                    ("ignoreProcessedFlag" variable (:type "bool") (reparse-symbol arg-sub-list) [170442 170467]))                  
                :type "void")
                nil [170258 175398])
            ("referenceAllele" function
               (:pointer 1
                :parent "AlleleParser"
                :arguments 
                  ( ("mapQ" variable (:type "int") (reparse-symbol arg-sub-list) [175438 175447])
                    ("baseQ" variable (:type "int") (reparse-symbol arg-sub-list) [175448 175458]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [175400 176944])
            ("genotypeAlleles" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [176996 177040])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [177079 177096])
                    ("useOnlyInputAlleles" variable (:type "bool") (reparse-symbol arg-sub-list) [177130 177155])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [177160 177185]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [176946 186336])
            ("homopolymerRunLeft" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [186607 186622]))                  
                :type "int")
                nil [186570 186974])
            ("homopolymerRunRight" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [187014 187029]))                  
                :type "int")
                nil [186976 187381])
            ("repeatCounts" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("position" variable (:type "long int") (reparse-symbol arg-sub-list) [187427 187445])
                    ("sequence" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [187446 187469])
                    ("maxsize" variable (:type "int") (reparse-symbol arg-sub-list) [187470 187482]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [187383 188943])
            ("isRepeatUnit" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("seq" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [188977 188995])
                    ("unit" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [188996 189015]))                  
                :type "bool")
                nil [188945 189344])
            ("hasInputVariantAllelesAtCurrentPosition" function
               (:parent "AlleleParser"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [189406 189411]))                  
                :type "bool")
                nil [189347 189611])
            ("<" function
               (:operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("AllelicPrimitive" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [189628 189654])
                    ("b" variable
                       (:reference 1
                        :constant-flag t
                        :type ("AllelicPrimitive" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [189655 189681]))                  
                :type "bool")
                nil [189613 189728]))          
    :file "AlleleParser.cpp"
    :pointmax 189729
    :fsize 189728
    :lastmodtime '(21565 38081 516450 657000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("DEBUG2" (spp-arg-list ("msg") 705 . 710))
          ("ERROR" (spp-arg-list ("msg") 759 . 764) . 
              ((symbol "cerr" 771 . 775) (punctuation "<" 776 . 777) (punctuation "<" 777 . 778) (string "\"ERROR(freebayes): \"" 779 . 799) (punctuation "<" 800 . 801) (punctuation "<" 801 . 802) (symbol "msg" 803 . 806) (punctuation "<" 807 . 808) (punctuation "<" 808 . 809) (symbol "endl" 810 . 814) (punctuation ";" 814 . 815)))
          ("WARNING" (spp-arg-list ("msg") 861 . 866) . 
              ((symbol "cerr" 873 . 877) (punctuation "<" 878 . 879) (punctuation "<" 879 . 880) (string "\"WARNING(freebayes): \"" 881 . 903) (punctuation "<" 904 . 905) (punctuation "<" 905 . 906) (symbol "msg" 907 . 910) (punctuation "<" 911 . 912) (punctuation "<" 912 . 913) (symbol "endl" 914 . 918) (punctuation ";" 918 . 919)))
          ("DEBUG" (spp-arg-list ("msg") 503 . 508) . 
              ((IF "if" 515 . 517) (semantic-list "(parameters.debug)" 518 . 536) (semantic-list "{ cerr << msg << endl; }" 537 . 561)))
          )

    )
   (semanticdb-table "Parameters.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Parameters.h" include nil nil [1 24])
            ("convert.h" include nil nil [25 45])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [47 67])
            ("simpleUsage" function
               (:parent "Parameters"
                :arguments 
                  ( ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [98 111]))                  
                :type "void")
                nil [69 868])
            ("usage" function
               (:parent "Parameters"
                :arguments 
                  ( ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [893 905]))                  
                :type "void")
                nil [870 23976])
            ("Parameters" function
               (:constructor-flag t
                :parent "Parameters"
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [24002 24011])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [24012 24024]))                  
                :type ("Parameters" type (:type "class") nil nil))
                nil [23979 47117]))          
    :file "Parameters.cpp"
    :pointmax 47118
    :fsize 47117
    :lastmodtime '(21565 38081 520450 466000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "convert.h"
    :file "convert.h"
    :fsize 470
    :lastmodtime '(21565 38081 542449 416000)
    )
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("CC" variable (:default-value ("g++")) nil [239 246])
            ("C" variable (:default-value ("gcc")) nil [246 252])
            ("CFLAGS" variable (:default-value ("-O0" "-D_FILE_OFFSET_BITS=64")) nil [305 339])
            ("BAMTOOLS_ROOT" variable (:default-value ("../bamtools")) nil [419 445])
            ("VCFLIB_ROOT" variable (:default-value ("../vcflib")) nil [445 467])
            ("LIBS" variable (:default-value ("-L./" "-L$(VCFLIB_ROOT)/tabixpp/" "-L$(BAMTOOLS_ROOT)/lib" "-ltabix" "-lz" "-lm")) nil [468 545])
            ("INCLUDE" variable (:default-value ("-I$(BAMTOOLS_ROOT)/src" "-I../ttmath" "-I$(VCFLIB_ROOT)/src" "-I$(VCFLIB_ROOT)/")) nil [545 629])
            ("all" function (:arguments ("autoversion" "../bin/freebayes" "../bin/bamleftalign")) nil [630 684])
            ("static" function nil nil [685 733])
            ("debug" function nil nil [734 803])
            ("profiling" function nil nil [804 850])
            ("gprof" function nil nil [851 894])
            (".PHONY" function (:arguments ("all" "static" "debug" "profiling" "gprof")) nil [895 936])
            ("$(BAMTOOLS_ROOT)" function nil nil [988 1098])
            ("OBJECTS" variable (:default-value ("BedReader.o" "CNV.o" "fastlz.o" "Fasta.o" "Parameters.o" "Allele.o" "Sample.o" "Result.o" "AlleleParser.o" "Utility.o" "Genotype.o" "DataLikelihood.o" "Multinomial.o" "Ewens.o" "ResultData.o" "Dirichlet.o" "Marginals.o" "split.o" "LeftAlign.o" "IndelAllele.o" "Bias.o" "Contamination.o" "SegfaultHandler.o" "../vcflib/tabixpp/tabix.o" "../vcflib/tabixpp/bgzf.o" "../vcflib/smithwaterman/SmithWatermanGotoh.o" "../vcflib/smithwaterman/disorder.c" "../vcflib/smithwaterman/LeftAlign.o" "../vcflib/smithwaterman/Repeats.o" "../vcflib/smithwaterman/IndelAllele.o" "Variant.o" "$(BAMTOOLS_ROOT)/lib/libbamtools.a")) nil [1100 1778])
            ("HEADERS" variable (:default-value ("multichoose.h" "version_git.h")) nil [1779 1815])
            ("freebayes" function (:arguments ("freebayes.o" "$(OBJECTS)" "$(HEADERS)")) nil [1831 1972])
            ("../bin/freebayes" function (:arguments ("freebayes.o" "$(OBJECTS)" "$(HEADERS)")) nil [1831 1972])
            ("alleles" function (:arguments ("alleles.o" "$(OBJECTS)" "$(HEADERS)")) nil [1973 2104])
            ("../bin/alleles" function (:arguments ("alleles.o" "$(OBJECTS)" "$(HEADERS)")) nil [1973 2104])
            ("dummy" function (:arguments ("dummy.o" "$(OBJECTS)" "$(HEADERS)")) nil [2105 2226])
            ("../bin/dummy" function (:arguments ("dummy.o" "$(OBJECTS)" "$(HEADERS)")) nil [2105 2226])
            ("bamleftalign" function (:arguments ("$(BAMTOOLS_ROOT)/lib/libbamtools.a" "bamleftalign.o" "Fasta.o" "LeftAlign.o" "IndelAllele.o" "split.o")) nil [2227 2504])
            ("../bin/bamleftalign" function (:arguments ("$(BAMTOOLS_ROOT)/lib/libbamtools.a" "bamleftalign.o" "Fasta.o" "LeftAlign.o" "IndelAllele.o" "split.o")) nil [2227 2504])
            ("bamfiltertech" function (:arguments ("$(BAMTOOLS_ROOT)/lib/libbamtools.a" "bamfiltertech.o" "$(OBJECTS)" "$(HEADERS)")) nil [2505 2701])
            ("../bin/bamfiltertech" function (:arguments ("$(BAMTOOLS_ROOT)/lib/libbamtools.a" "bamfiltertech.o" "$(OBJECTS)" "$(HEADERS)")) nil [2505 2701])
            ("Fasta.o" function (:arguments ("Fasta.cpp")) nil [2714 2774])
            ("alleles.o" function (:arguments ("alleles.cpp" "AlleleParser.o" "Allele.o")) nil [2775 2865])
            ("dummy.o" function (:arguments ("dummy.cpp" "AlleleParser.o" "Allele.o")) nil [2866 2950])
            ("freebayes.o" function (:arguments ("freebayes.cpp" "TryCatch.h" "$(BAMTOOLS_ROOT)/lib/libbamtools.a")) nil [2951 3069])
            ("fastlz.o" function (:arguments ("fastlz.c" "fastlz.h")) nil [3070 3138])
            ("Parameters.o" function (:arguments ("Parameters.cpp" "Parameters.h" "Version.h")) nil [3139 3237])
            ("Allele.o" function (:arguments ("Allele.cpp" "Allele.h" "multichoose.h" "Genotype.h")) nil [3238 3335])
            ("Sample.o" function (:arguments ("Sample.cpp" "Sample.h")) nil [3336 3408])
            ("Genotype.o" function (:arguments ("Genotype.cpp" "Genotype.h" "Allele.h" "multipermute.h")) nil [3409 3513])
            ("Ewens.o" function (:arguments ("Ewens.cpp" "Ewens.h")) nil [3514 3582])
            ("AlleleParser.o" function (:arguments ("AlleleParser.cpp" "AlleleParser.h" "multichoose.h" "Parameters.h" "$(BAMTOOLS_ROOT)/lib/libbamtools.a")) nil [3583 3741])
            ("Utility.o" function (:arguments ("Utility.cpp" "Utility.h" "Sum.h" "Product.h")) nil [3742 3834])
            ("SegfaultHandler.o" function (:arguments ("SegfaultHandler.cpp" "SegfaultHandler.h")) nil [3835 3943])
            ("Dirichlet.o" function (:arguments ("Dirichlet.h" "Dirichlet.cpp" "Sum.h" "Product.h")) nil [3944 4044])
            ("Multinomial.o" function (:arguments ("Multinomial.h" "Multinomial.cpp" "Sum.h" "Product.h" "Utility.h")) nil [4045 4163])
            ("DataLikelihood.o" function (:arguments ("DataLikelihood.cpp" "DataLikelihood.h" "Sum.h" "Product.h")) nil [4164 4284])
            ("Marginals.o" function (:arguments ("Marginals.cpp" "Marginals.h")) nil [4285 4369])
            ("ResultData.o" function (:arguments ("ResultData.cpp" "ResultData.h" "Result.h" "Result.cpp" "Allele.h" "Utility.h" "Genotype.h" "AlleleParser.h" "Version.h")) nil [4370 4533])
            ("Result.o" function (:arguments ("Result.cpp" "Result.h")) nil [4534 4606])
            ("BedReader.o" function (:arguments ("BedReader.cpp" "BedReader.h")) nil [4607 4691])
            ("CNV.o" function (:arguments ("CNV.cpp" "CNV.h")) nil [4692 4752])
            ("Bias.o" function (:arguments ("Bias.cpp" "Bias.h")) nil [4753 4817])
            ("split.o" function (:arguments ("split.h" "split.cpp")) nil [4818 4886])
            ("bamleftalign.o" function (:arguments ("bamleftalign.cpp" "LeftAlign.cpp")) nil [4887 4982])
            ("bamfiltertech.o" function (:arguments ("bamfiltertech.cpp")) nil [4983 5067])
            ("LeftAlign.o" function (:arguments ("LeftAlign.h" "LeftAlign.cpp" "$(BAMTOOLS_ROOT)/lib/libbamtools.a")) nil [5068 5187])
            ("IndelAllele.o" function (:arguments ("IndelAllele.cpp" "IndelAllele.h")) nil [5188 5280])
            ("Variant.o" function (:arguments ("$(VCFLIB_ROOT)/src/Variant.h" "$(VCFLIB_ROOT)/src/Variant.cpp")) nil [5281 5414])
            ("../vcflib/tabixpp/tabix.o" function (:arguments ("../vcflib/tabixpp/tabix.hpp" "../vcflib/tabixpp/tabix.cpp")) nil [5415 5498])
            ("../vcflib/tabixpp/bgzf.o" function (:arguments ("../vcflib/tabixpp/bgzf.c" "../vcflib/tabixpp/bgzf.h")) nil [5498 5607])
            ("../vcflib/smithwaterman/SmithWatermanGotoh.o" function (:arguments ("../vcflib/smithwaterman/SmithWatermanGotoh.h" "../vcflib/smithwaterman/SmithWatermanGotoh.cpp")) nil [5608 5785])
            ("VERSION_FILE" variable (:default-value ("./version_git.h")) nil [5787 5816])
            ("RELEASED_VERSION_FILE" variable (:default-value ("./version_release.txt")) nil [5816 5860])
            (".PHONY" function (:arguments ("setversion")) nil [6195 6214])
            ("setversion" function nil nil [6214 6226])
            (".PHONY" function (:arguments ("autoversion")) nil [7529 7549])
            ("autoversion" function nil nil [7549 8378])
            ("clean" function nil nil [8380 8581]))          
    :file "Makefile"
    :pointmax 8547
    :fsize 8581
    :lastmodtime '(21573 28271 170576 858000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Allele.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Allele.h" include nil nil [1 20])
            ("multichoose.h" include nil nil [21 45])
            ("TryCatch.h" include nil nil [46 67])
            ("referenceOffset" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [98 103]))                  
                :type "int")
                nil [70 420])
            ("setQuality" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [446 451]))                  
                :type "void")
                nil [422 522])
            ("bpLeft" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [543 548]))                  
                :type "int")
                nil [524 590])
            ("bpRight" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [612 617]))                  
                :type "int")
                nil [592 677])
            ("update" function
               (:parent "Allele"
                :arguments 
                  ( ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [876 896]))                  
                :type "void")
                nil [856 1300])
            ("subquality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("startpos" variable (:type "int") (reparse-symbol arg-sub-list) [1367 1380])
                    ("len" variable (:type "int") (reparse-symbol arg-sub-list) [1381 1389]))                  
                :type "int")
                nil [1338 1551])
            ("lnsubquality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("startpos" variable (:type "int") (reparse-symbol arg-sub-list) [1628 1641])
                    ("len" variable (:type "int") (reparse-symbol arg-sub-list) [1642 1650]))                  
                :type "long double")
                nil [1589 1708])
            ("subquality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1739 1755]))                  
                :type "int")
                nil [1710 3817])
            ("lnsubquality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3858 3874]))                  
                :type "long double")
                nil [3819 3920])
            ("updateAllelesCachedData" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3951 3976]))                  
                :type "void")
                nil [3922 4093])
            ("currentQuality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4484 4489]))                  
                :type "short")
                nil [4449 5381])
            ("lncurrentQuality" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5426 5431]))                  
                :type "long double")
                nil [5383 5480])
            ("typeStr" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5505 5510]))                  
                :type ("string" type (:type "class") nil nil))
                nil [5482 6237])
            ("isReference" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6264 6269]))                  
                :type "bool")
                nil [6239 6316])
            ("isSNP" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6337 6342]))                  
                :type "bool")
                nil [6318 6383])
            ("isInsertion" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6410 6415]))                  
                :type "bool")
                nil [6385 6462])
            ("isDeletion" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6488 6493]))                  
                :type "bool")
                nil [6464 6539])
            ("isMNP" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6560 6565]))                  
                :type "bool")
                nil [6541 6606])
            ("isComplex" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6631 6636]))                  
                :type "bool")
                nil [6608 6681])
            ("isNull" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6703 6708]))                  
                :type "bool")
                nil [6683 6750])
            ("base" function
               (:parent "Allele"
                :constant-flag t
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6778 6783]))                  
                :type ("string" type (:type "class") nil nil))
                nil [6752 8005])
            ("stringForAllele" function
               (:arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8030 8051]))                  
                :type ("string" type (:type "class") nil nil))
                nil [8007 8922])
            ("stringForAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8948 8972]))                  
                :type ("string" type (:type "class") nil nil))
                nil [8924 9172])
            ("json" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9186 9211]))                  
                :type ("string" type (:type "class") nil nil))
                nil [9174 9435])
            ("json" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9449 9457])
                    ("" variable (:type ("allele" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9458 9465]))                  
                :type ("string" type (:type "class") nil nil))
                nil [9437 9492])
            ("json" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9514 9519]))                  
                :type ("string" type (:type "class") nil nil))
                nil [9494 10762])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10784 10797])
                    ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [10798 10823]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [10764 10972])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10994 11007])
                    ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11008 11032]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [10974 11178])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11200 11213])
                    ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11214 11237]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [11180 11384])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11406 11419])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11420 11429])
                    ("" variable (:type ("allele" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11429 11436]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [11386 11476])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11498 11511])
                    ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11512 11527]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [11478 12549])
            ("<" function
               (:operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12566 12582])
                    ("b" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12583 12599]))                  
                :type "bool")
                nil [12551 12678])
            ("==" function
               (:operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12850 12866])
                    ("b" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12867 12883]))                  
                :type "bool")
                nil [12834 12964])
            ("!=" function
               (:operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12982 12998])
                    ("b" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12999 13015]))                  
                :type "bool")
                nil [12966 13042])
            ("equivalent" function
               (:parent "Allele"
                :arguments 
                  ( ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13068 13078]))                  
                :type "bool")
                nil [13044 14239])
            ("areHomozygous" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14260 14285]))                  
                :type "bool")
                nil [14241 14519])
            ("countAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14594 14619]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14564 14975])
            ("countAllelesString" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15056 15081]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [15020 15496])
            ("countAllelesString" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [15534 15558]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [15498 15971])
            ("countAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16004 16028]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [15974 16382])
            ("countAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16414 16437]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [16384 16791])
            ("groupAllelesBySample" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16845 16868]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [16794 17102])
            ("uniqueAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17133 17156]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [17104 17386])
            ("groupAllelesBySample" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17414 17437])
                    ("groups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17438 17476]))                  
                :type "void")
                nil [17388 17649])
            ("homogenizeAlleles" function
               (:arguments 
                  ( ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17948 17992])
                    ("refseq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17993 18008])
                    ("refallele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [18009 18027]))                  
                :type "void")
                nil [17925 19836])
            ("resetProcessedFlag" function
               (:arguments 
                  ( ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19862 19906]))                  
                :type "void")
                nil [19838 20161])
            ("groupAlleles" function
               (:arguments 
                  ( ("sampleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [20181 20225])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [20226 20270]))                  
                :type "void")
                nil [20163 20597])
            ("groupAlleles" function
               (:arguments 
                  ( ("sampleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [20637 20681])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [20682 20699]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [20599 21557])
            ("groupAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [21598 21621])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [21622 21639]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [21559 22272])
            ("groupAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [22313 22335])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [22336 22353]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [22274 22986])
            ("groupAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23027 23052])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [23053 23070]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [22988 23705])
            ("groupAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23746 23770])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [23771 23788]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [23707 24423])
            ("groupAlleles_copy" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24468 24490])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [24491 24508]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [24425 25135])
            ("groupAlleles_copy" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25180 25204])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [25205 25222]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [25137 25851])
            ("groupAlleles_copy" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25896 25920]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [25853 26514])
            ("sameSample" function
               (:parent "Allele"
                :arguments 
                  ( ("other" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26540 26554]))                  
                :type "bool")
                nil [26516 26599])
            ("allelesSameType" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26622 26631])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26631 26633])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26634 26643])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26643 26645]))                  
                :type "bool")
                nil [26601 26676])
            ("allelesEquivalent" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26701 26710])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26710 26712])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26713 26722])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26722 26724]))                  
                :type "bool")
                nil [26678 26754])
            ("allelesSameSample" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26779 26788])
                    ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26788 26790])
                    ("" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26791 26800])
                    ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26800 26802]))                  
                :type "bool")
                nil [26756 26841])
            ("allelesSameType" function
               (:arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26864 26874])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26875 26885]))                  
                :type "bool")
                nil [26843 26914])
            ("allelesEquivalent" function
               (:arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26939 26949])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26950 26960]))                  
                :type "bool")
                nil [26916 26988])
            ("allelesSameSample" function
               (:arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27013 27023])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27024 27034]))                  
                :type "bool")
                nil [26990 27071])
            ("allelesEqual" function
               (:arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27091 27101])
                    ("b" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27102 27112]))                  
                :type "bool")
                nil [27073 27131])
            ("genotypeAllelesFromAlleleGroups" function
               (:arguments 
                  ( ("groups" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27180 27213]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [27133 27411])
            ("genotypeAllelesFromAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27455 27480]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [27413 27663])
            ("genotypeAllelesFromAlleleGroups" function
               (:arguments 
                  ( ("groups" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27712 27744]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [27665 27940])
            ("genotypeAllelesFromAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27984 28008]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [27942 28189])
            ("genotypeAllele" function
               (:arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28213 28223]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [28191 28348])
            ("genotypeAllele" function
               (:arguments 
                  ( ("type" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28372 28388])
                    ("alt" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28389 28400])
                    ("len" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [28401 28418])
                    ("cigar" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28419 28432])
                    ("reflen" variable (:type "unsigned int") (reparse-symbol arg-sub-list) [28433 28453])
                    ("pos" variable (:type "long int") (reparse-symbol arg-sub-list) [28454 28467])
                    ("rrbound" variable (:type "long int") (reparse-symbol arg-sub-list) [28468 28485]))                  
                :type ("Allele" type (:type "class") nil nil))
                nil [28350 28553])
            ("allowedAlleleTypes" function
               (:arguments 
                  ( ("allowedEnumeratedTypes" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("AlleleType" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28578 28621]))                  
                :type "int")
                nil [28555 28866])
            ("filterAlleles" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28887 28910])
                    ("allowedTypes" variable (:type "int") (reparse-symbol arg-sub-list) [28911 28928]))                  
                :type "void")
                nil [28868 29230])
            ("countAlleles" function
               (:arguments 
                  ( ("sampleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29249 29293]))                  
                :type "int")
                nil [29232 29488])
            ("countAllelesWithBase" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29515 29540])
                    ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29541 29553]))                  
                :type "int")
                nil [29490 29745])
            ("baseCount" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [29761 29786])
                    ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29787 29799])
                    ("strand" variable (:type ("AlleleStrand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29800 29820]))                  
                :type "int")
                nil [29747 30038])
            ("baseCount" function
               (:arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30088 30113])
                    ("refbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30114 30129])
                    ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30130 30145]))                  
                :type ("pair" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil)
                          ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [30040 30896])
            ("readSeq" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [30921 30926]))                  
                :type ("string" type (:type "class") nil nil))
                nil [30898 31106])
            ("read5p" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31130 31135]))                  
                :type ("string" type (:type "class") nil nil))
                nil [31108 31469])
            ("read3p" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31493 31498]))                  
                :type ("string" type (:type "class") nil nil))
                nil [31471 31810])
            ("read5pNonNull" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31841 31846]))                  
                :type ("string" type (:type "class") nil nil))
                nil [31812 32176])
            ("read3pNonNull" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [32207 32212]))                  
                :type ("string" type (:type "class") nil nil))
                nil [32178 32534])
            ("read5pNonNullBases" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [32567 32572]))                  
                :type "int")
                nil [32536 33011])
            ("read3pNonNullBases" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [33044 33049]))                  
                :type "int")
                nil [33013 33478])
            ("subtract" function
               (:parent "Allele"
                :arguments 
                  ( ("subtractFromRefStart" variable (:type "int") (reparse-symbol arg-sub-list) [33648 33673])
                    ("subtractFromRefEnd" variable (:type "int") (reparse-symbol arg-sub-list) [33682 33705])
                    ("substart" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33714 33731])
                    ("subend" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33740 33755])
                    ("cigarStart" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33764 33803])
                    ("cigarEnd" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33812 33849])
                    ("qsubstart" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33858 33883])
                    ("qsubend" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33892 33920]))                  
                :type "void")
                nil [33617 38680])
            ("subtractFromStart" function
               (:parent "Allele"
                :arguments 
                  ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [38713 38720])
                    ("seq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38721 38733])
                    ("cig" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38734 38766])
                    ("quals" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38767 38788]))                  
                :type "void")
                nil [38682 38958])
            ("subtractFromEnd" function
               (:parent "Allele"
                :arguments 
                  ( ("bp" variable (:type "int") (reparse-symbol arg-sub-list) [38989 38996])
                    ("seq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38997 39009])
                    ("cig" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39010 39042])
                    ("quals" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39043 39064]))                  
                :type "void")
                nil [38960 39234])
            ("addToStart" function
               (:parent "Allele"
                :arguments 
                  ( ("seq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39260 39272])
                    ("cig" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39273 39305])
                    ("quals" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39306 39327]))                  
                :type "void")
                nil [39236 39485])
            ("addToEnd" function
               (:parent "Allele"
                :arguments 
                  ( ("seq" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39509 39521])
                    ("cig" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39522 39554])
                    ("quals" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39555 39576]))                  
                :type "void")
                nil [39487 39734])
            ("add" function
               (:parent "Allele"
                :arguments 
                  ( ("addToStart" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39762 39781])
                    ("addToEnd" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39790 39807])
                    ("cigarStart" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39816 39855])
                    ("cigarEnd" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39864 39901])
                    ("qaddToStart" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39910 39937])
                    ("qaddToEnd" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39946 39976]))                  
                :type "void")
                nil [39736 41698])
            ("updateTypeAndLengthFromCigar" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [41742 41747]))                  
                :type "void")
                nil [41700 44079])
            ("referenceLengthFromCigar" function
               (:arguments 
                  ( ("cigar" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44110 44124]))                  
                :type "int")
                nil [44081 44528])
            ("referenceLengthFromCigar" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [44567 44572]))                  
                :type "int")
                nil [44530 44976])
            ("mergeAllele" function
               (:parent "Allele"
                :arguments 
                  ( ("newAllele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [45079 45103])
                    ("newType" variable (:type ("AlleleType" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45104 45123]))                  
                :type "void")
                nil [45054 46239])
            ("squash" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46261 46266]))                  
                :type "void")
                nil [46241 46371])
            ("getLengthOnReference" function
               (:parent "Allele"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46415 46420]))                  
                :type "unsigned int")
                nil [46373 46463])
            ("alleleUnion" function
               (:arguments 
                  ( ("a1" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [46492 46511])
                    ("a2" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [46512 46531]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [46465 47013])
            ("isEmptyAllele" function
               (:arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47034 47055]))                  
                :type "bool")
                nil [47015 47090])
            ("isDividedIndel" function
               (:arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47112 47133]))                  
                :type "bool")
                nil [47092 47337])
            ("isUnflankedIndel" function
               (:arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47446 47467]))                  
                :type "bool")
                nil [47424 47902])
            ("isEmptyAlleleOrIsDividedIndel" function
               (:arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [47939 47960]))                  
                :type "bool")
                nil [47904 48024]))          
    :file "Allele.cpp"
    :pointmax 48025
    :fsize 48024
    :lastmodtime '(21565 38081 514450 753000)
    :unmatched-syntax '((punctuation 26799 . 26800) (punctuation 26787 . 26788) (punctuation 26721 . 26722) (punctuation 26709 . 26710) (punctuation 26642 . 26643) (punctuation 26630 . 26631) (semantic-list 25222 . 25244) (semantic-list 25210 . 25222) (semantic-list 24508 . 24530) (semantic-list 24496 . 24508) (semantic-list 23788 . 23810) (semantic-list 23776 . 23788) (semantic-list 23070 . 23092) (semantic-list 23058 . 23070) (semantic-list 22353 . 22375) (semantic-list 22341 . 22353) (semantic-list 21639 . 21663) (semantic-list 21627 . 21639) (semantic-list 20699 . 20721) (semantic-list 20687 . 20699) (punctuation 11428 . 11429) (punctuation 9456 . 9457))
    )
   (semanticdb-table "SegfaultHandler.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("SegfaultHandler.h" include nil nil [1 29])
            ("segfaultHandler" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [128 136]))                  
                :type "void")
                nil [107 407]))          
    :file "SegfaultHandler.cpp"
    :pointmax 408
    :fsize 407
    :lastmodtime '(21565 38081 522450 371000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "join.h"
    :file "join.h"
    :fsize 626
    :lastmodtime '(21565 38081 543449 368000)
    )
   (semanticdb-table "BedReader.h"
    :file "BedReader.h"
    :fsize 1877
    :lastmodtime '(21565 38081 517450 610000)
    )
   (semanticdb-table "CNV.h"
    :file "CNV.h"
    :fsize 763
    :lastmodtime '(21565 38081 517450 610000)
    )
   (semanticdb-table "Result.h"
    :file "Result.h"
    :fsize 379
    :lastmodtime '(21565 38081 521450 419000)
    )
   (semanticdb-table "LeftAlign.h"
    :file "LeftAlign.h"
    :fsize 845
    :lastmodtime '(21565 38081 519450 514000)
    )
   (semanticdb-table "version_git.h"
    :file "version_git.h"
    :fsize 118
    :lastmodtime '(21569 24879 236854 871000)
    )
   (semanticdb-table "Sample.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Sample.h" include nil nil [1 20])
            ("observationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [136 151]))                  
                :type "int")
                nil [107 204])
            ("observationCountInclPartials" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [247 252]))                  
                :type "int")
                nil [206 315])
            ("observationCountInclPartials" function
               (:parent "Sample"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [361 376]))                  
                :type "double")
                nil [317 441])
            ("partialObservationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [482 497]))                  
                :type "double")
                nil [443 557])
            ("observationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [632 651]))                  
                :type "int")
                nil [603 772])
            ("partialObservationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [810 815]))                  
                :type "int")
                nil [774 854])
            ("partialObservationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [895 914]))                  
                :type "double")
                nil [856 1347])
            ("observationCountInclPartials" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1393 1412]))                  
                :type "double")
                nil [1349 1483])
            ("observationCount" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1550 1555]))                  
                :type "int")
                nil [1521 1695])
            ("qualSum" function
               (:parent "Sample"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1717 1732]))                  
                :type "int")
                nil [1697 1776])
            ("qualSum" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1798 1817]))                  
                :type "int")
                nil [1778 2099])
            ("partialQualSum" function
               (:parent "Sample"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2131 2146]))                  
                :type "double")
                nil [2101 2197])
            ("partialQualSum" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2229 2248]))                  
                :type "double")
                nil [2199 2610])
            ("observationCount" function
               (:parent "Samples"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2726 2741]))                  
                :type "int")
                nil [2696 2794])
            ("observationCountInclPartials" function
               (:parent "Samples"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2841 2856]))                  
                :type "double")
                nil [2796 2921])
            ("partialObservationCount" function
               (:parent "Samples"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2963 2978]))                  
                :type "double")
                nil [2923 3038])
            ("observationCount" function
               (:parent "Samples"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3114 3133]))                  
                :type "int")
                nil [3084 3278])
            ("partialObservationCount" function
               (:parent "Samples"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3320 3339]))                  
                :type "double")
                nil [3280 3494])
            ("observationCountInclPartials" function
               (:parent "Samples"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3541 3560]))                  
                :type "double")
                nil [3496 3631])
            ("observationCount" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3699 3704]))                  
                :type "int")
                nil [3669 3845])
            ("observationCountInclPartials" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3892 3897]))                  
                :type "double")
                nil [3847 4053])
            ("qualSum" function
               (:parent "Samples"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4076 4091]))                  
                :type "int")
                nil [4055 4128])
            ("qualSum" function
               (:parent "Samples"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4151 4170]))                  
                :type "int")
                nil [4130 4306])
            ("partialQualSum" function
               (:parent "Samples"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4339 4354]))                  
                :type "double")
                nil [4308 4398])
            ("partialQualSum" function
               (:parent "Samples"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4431 4450]))                  
                :type "double")
                nil [4400 4596])
            ("estimatedAlleleFrequencies" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4654 4659]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("string" type nil nil nil)
                          ("double" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [4598 5421])
            ("sortReferenceAlleles" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5573 5578]))                  
                :type "void")
                nil [5539 6378])
            ("strandBaseCount" function
               (:parent "Sample"
                :arguments 
                  ( ("refbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6421 6436])
                    ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6437 6452]))                  
                :type ("StrandBaseCounts" type (:type "class") nil nil))
                nil [6380 7354])
            ("baseCount" function
               (:parent "Sample"
                :arguments 
                  ( ("base" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7378 7390])
                    ("strand" variable (:type ("AlleleStrand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7391 7411]))                  
                :type "int")
                nil [7356 7755])
            ("json" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7778 7783]))                  
                :type ("string" type (:type "class") nil nil))
                nil [7758 8225])
            ("groupAlleles" function
               (:arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8245 8262])
                    ("alleleGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8263 8307]))                  
                :type "void")
                nil [8227 8825])
            ("sufficientAlternateObservations" function
               (:arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8864 8881])
                    ("mincount" variable (:type "int") (reparse-symbol arg-sub-list) [8882 8895])
                    ("minfraction" variable (:type "float") (reparse-symbol arg-sub-list) [8896 8914]))                  
                :type "bool")
                nil [8827 10467])
            ("countAlleles" function
               (:arguments 
                  ( ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10487 10504]))                  
                :type "int")
                nil [10470 10793])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10815 10828])
                    ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10829 10844]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [10795 11001])
            ("assignPartialSupport" function
               (:parent "Samples"
                :arguments 
                  ( ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11039 11063])
                    ("partialObservations" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11099 11136])
                    ("partialObservationGroups" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("vector" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11172 11228])
                    ("partialObservationSupport" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil)
                                  ("set" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11264 11319])
                    ("haplotypeStart" variable (:type "unsigned long") (reparse-symbol arg-sub-list) [11355 11384])
                    ("haplotypeLength" variable (:type "int") (reparse-symbol arg-sub-list) [11420 11440]))                  
                :type "void")
                nil [11004 14665])
            ("observationSupports" function
               (:parent "Sample"
                :arguments 
                  ( ("obs" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14700 14712])
                    ("allele" variable
                       (:pointer 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14713 14728]))                  
                :type "bool")
                nil [14667 15124])
            ("clearFullObservations" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15162 15167]))                  
                :type "void")
                nil [15126 15263])
            ("clearPartialObservations" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15304 15309]))                  
                :type "void")
                nil [15265 15424])
            ("clearPartialObservations" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15464 15469]))                  
                :type "void")
                nil [15426 15659])
            ("setSupportedAlleles" function
               (:parent "Sample"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15694 15699]))                  
                :type "void")
                nil [15661 15802])
            ("setSupportedAlleles" function
               (:parent "Samples"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [15838 15843]))                  
                :type "void")
                nil [15804 15945]))          
    :file "Sample.cpp"
    :pointmax 15946
    :fsize 15945
    :lastmodtime '(21565 38081 521450 419000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Fasta.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Fasta.h" include nil nil [418 436])
            ("FastaIndexEntry" function
               (:constructor-flag t
                :parent "FastaIndexEntry"
                :arguments 
                  ( ("name" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [471 483])
                    ("length" variable (:type "int") (reparse-symbol arg-sub-list) [484 495])
                    ("offset" variable (:type "long long") (reparse-symbol arg-sub-list) [496 513])
                    ("line_blen" variable (:type "int") (reparse-symbol arg-sub-list) [514 528])
                    ("line_len" variable (:type "int") (reparse-symbol arg-sub-list) [529 542]))                  
                :type ("FastaIndexEntry" type (:type "class") nil nil))
                nil [438 656])
            ("FastaIndexEntry" function
               (:constructor-flag t
                :parent "FastaIndexEntry"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [691 696]))                  
                :type ("FastaIndexEntry" type (:type "class") nil nil))
                nil [658 730])
            ("FastaIndexEntry" function
               (:destructor-flag t
                :parent "FastaIndexEntry"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [766 771]))                  
                :type "void")
                nil [732 774])
            ("clear" function
               (:parent "FastaIndexEntry"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [804 809]))                  
                :type "void")
                nil [776 1029])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("output" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1051 1067])
                    ("e" variable
                       (:reference 1
                        :constant-flag t
                        :type ("FastaIndexEntry" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1068 1093]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [1031 1363])
            ("FastaIndex" function
               (:constructor-flag t
                :parent "FastaIndex"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1388 1393]))                  
                :type ("FastaIndex" type (:type "class") nil nil))
                nil [1365 1397])
            ("readIndexFile" function
               (:parent "FastaIndex"
                :arguments 
                  ( ("fname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1430 1443]))                  
                :type "void")
                nil [1399 2916])
            ("fastaIndexEntryCompare" function
               (:arguments 
                  ( ("a" variable (:type ("FastaIndexEntry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2997 3015])
                    ("b" variable (:type ("FastaIndexEntry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3016 3034]))                  
                :type "bool")
                nil [2967 3066])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("output" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3088 3104])
                    ("fastaIndex" variable
                       (:reference 1
                        :type ("FastaIndex" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3105 3128]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [3068 3572])
            ("indexReference" function
               (:parent "FastaIndex"
                :arguments 
                  ( ("refname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3606 3621]))                  
                :type "void")
                nil [3574 8059])
            ("flushEntryToIndex" function
               (:parent "FastaIndex"
                :arguments 
                  ( ("entry" variable
                       (:reference 1
                        :type ("FastaIndexEntry" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8096 8119]))                  
                :type "void")
                nil [8061 8413])
            ("writeIndexFile" function
               (:parent "FastaIndex"
                :arguments 
                  ( ("fname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8447 8460]))                  
                :type "void")
                nil [8415 8742])
            ("FastaIndex" function
               (:destructor-flag t
                :parent "FastaIndex"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8768 8773]))                  
                :type "void")
                nil [8744 8800])
            ("entry" function
               (:parent "FastaIndex"
                :arguments 
                  ( ("name" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8836 8848]))                  
                :type ("FastaIndexEntry" type (:type "class") nil nil))
                nil [8802 9070])
            ("indexFileExtension" function
               (:parent "FastaIndex"
                :type ("string" type (:type "class") nil nil))
                nil [9072 9130])
            ("open" function
               (:parent "FastaReference"
                :arguments 
                  ( ("reffilename" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9220 9239]))                  
                :type "void")
                nil [9194 9937])
            ("FastaReference" function
               (:destructor-flag t
                :parent "FastaReference"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9971 9976]))                  
                :type "void")
                nil [9939 10016])
            ("getSequence" function
               (:parent "FastaReference"
                :arguments 
                  ( ("seqname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10053 10068]))                  
                :type ("string" type (:type "class") nil nil))
                nil [10018 10652])
            ("sequenceNameStartingWith" function
               (:parent "FastaReference"
                :arguments 
                  ( ("seqnameStart" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10744 10764]))                  
                :type ("string" type (:type "class") nil nil))
                nil [10696 10963])
            ("getSubSequence" function
               (:parent "FastaReference"
                :arguments 
                  ( ("seqname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11003 11018])
                    ("start" variable (:type "int") (reparse-symbol arg-sub-list) [11019 11029])
                    ("length" variable (:type "int") (reparse-symbol arg-sub-list) [11030 11041]))                  
                :type ("string" type (:type "class") nil nil))
                nil [10965 12113])
            ("sequenceLength" function
               (:parent "FastaReference"
                :arguments 
                  ( ("seqname" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12164 12179]))                  
                :type "unsigned int")
                nil [12120 12259]))          
    :file "Fasta.cpp"
    :pointmax 12261
    :fsize 12260
    :lastmodtime '(21565 38081 518450 562000)
    :unmatched-syntax '((LONG 12115 . 12119))
    )
   (semanticdb-table "LeftAlign.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("LeftAlign.h" include nil nil [1 23])
            ("leftAlign" function
               (:arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1083 1107])
                    ("referenceSequence" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1108 1134])
                    ("debug" variable (:type "bool") (reparse-symbol arg-sub-list) [1135 1146]))                  
                :type "bool")
                nil [1068 13489])
            ("countMismatches" function
               (:arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13511 13535])
                    ("referenceSequence" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13536 13561]))                  
                :type "int")
                nil [13491 14645])
            ("stablyLeftAlign" function
               (:arguments 
                  ( ("alignment" variable
                       (:reference 1
                        :type ("BamAlignment" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14898 14922])
                    ("referenceSequence" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14923 14948])
                    ("maxiterations" variable (:type "int") (reparse-symbol arg-sub-list) [14949 14967])
                    ("debug" variable (:type "bool") (reparse-symbol arg-sub-list) [14968 14979]))                  
                :type "bool")
                nil [14877 15886]))          
    :file "LeftAlign.cpp"
    :pointmax 15887
    :fsize 15886
    :lastmodtime '(21565 38081 519450 514000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Utility.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Utility.h" include nil nil [25 45])
            ("Sum.h" include nil nil [46 62])
            ("Product.h" include nil nil [63 83])
            ("PHRED_MAX" variable (:constant-flag t) nil [93 102])
            ("std" using (:type ("std" type
                 (:prototype t
                  :type "namespace")
                  nil nil)) nil [183 203])
            ("qualityChar2ShortInt" function
               (:arguments 
                  ( ("c" variable (:type "char") (reparse-symbol arg-sub-list) [232 239]))                  
                :type "short")
                nil [205 282])
            ("qualityChar2LongDouble" function
               (:arguments 
                  ( ("c" variable (:type "char") (reparse-symbol arg-sub-list) [319 326]))                  
                :type "long double")
                nil [284 375])
            ("lnqualityChar2ShortInt" function
               (:arguments 
                  ( ("c" variable (:type "char") (reparse-symbol arg-sub-list) [412 419]))                  
                :type "long double")
                nil [377 467])
            ("qualityInt2Char" function
               (:arguments 
                  ( ("i" variable (:type "short") (reparse-symbol arg-sub-list) [490 498]))                  
                :type "char")
                nil [469 540])
            ("ln2log10" function
               (:arguments 
                  ( ("prob" variable (:type "long double") (reparse-symbol arg-sub-list) [563 580]))                  
                :type "long double")
                nil [542 612])
            ("log102ln" function
               (:arguments 
                  ( ("prob" variable (:type "long double") (reparse-symbol arg-sub-list) [635 652]))                  
                :type "long double")
                nil [614 682])
            ("phred2ln" function
               (:arguments 
                  ( ("qual" variable (:type "int") (reparse-symbol arg-sub-list) [705 714]))                  
                :type "long double")
                nil [684 750])
            ("ln2phred" function
               (:arguments 
                  ( ("prob" variable (:type "long double") (reparse-symbol arg-sub-list) [773 790]))                  
                :type "long double")
                nil [752 828])
            ("phred2float" function
               (:arguments 
                  ( ("qual" variable (:type "int") (reparse-symbol arg-sub-list) [854 863]))                  
                :type "long double")
                nil [830 899])
            ("float2phred" function
               (:arguments 
                  ( ("prob" variable (:type "long double") (reparse-symbol arg-sub-list) [925 942]))                  
                :type "long double")
                nil [901 1175])
            ("big2phred" function
               (:arguments 
                  ( ("prob" variable
                       (:reference 1
                        :constant-flag t
                        :type ("BigFloat" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1199 1220]))                  
                :type "long double")
                nil [1177 1301])
            ("nan2zero" function
               (:arguments 
                  ( ("x" variable (:type "long double") (reparse-symbol arg-sub-list) [1324 1338]))                  
                :type "long double")
                nil [1303 1415])
            ("powln" function
               (:arguments 
                  ( ("m" variable (:type "long double") (reparse-symbol arg-sub-list) [1435 1449])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [1450 1456]))                  
                :type "long double")
                nil [1417 1478])
            ("jointQuality" function
               (:arguments 
                  ( ("quals" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1575 1607]))                  
                :type "long double")
                nil [1550 2026])
            ("jointQuality" function
               (:arguments 
                  ( ("qualstr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2053 2080]))                  
                :type "long double")
                nil [2028 2410])
            ("qualities" function
               (:arguments 
                  ( ("qualstr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2441 2468]))                  
                :type ("std::vector" type
                     (:template-specifier 
                        ( ("short" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [2412 2626])
            ("sumQuality" function
               (:arguments 
                  ( ("qualstr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2651 2678]))                  
                :type "long double")
                nil [2628 2847])
            ("minQuality" function
               (:arguments 
                  ( ("qualstr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2872 2899]))                  
                :type "long double")
                nil [2849 3198])
            ("minQuality" function
               (:arguments 
                  ( ("qualities" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3217 3253]))                  
                :type "short")
                nil [3200 3413])
            ("averageQuality" function
               (:arguments 
                  ( ("qualstr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3492 3519]))                  
                :type "long double")
                nil [3465 3763])
            ("averageQuality" function
               (:arguments 
                  ( ("qualities" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("short" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3792 3823]))                  
                :type "long double")
                nil [3765 4006])
            ("stringInVector" function
               (:arguments 
                  ( ("item" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4028 4040])
                    ("items" variable (:type ("vector" type
                         (:template-specifier 
                            ( ("string" type nil nil nil))                            
                          :type "class")
                          nil nil)) (reparse-symbol arg-sub-list) [4041 4062]))                  
                :type "bool")
                nil [4008 4229])
            ("allATGC" function
               (:arguments 
                  ( ("s" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4244 4254]))                  
                :type "bool")
                nil [4231 4460])
            ("upper" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [4472 4478]))                  
                :type "int")
                nil [4462 4521])
            ("uppercase" function
               (:arguments 
                  ( ("s" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4540 4549]))                  
                :type ("string" type (:type "class") nil nil))
                nil [4523 4620])
            ("strip" function
               (:arguments 
                  ( ("str" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [4635 4653])
                    ("separators" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [4654 4677]))                  
                :type ("string" type (:type "class") nil nil))
                nil [4622 4873])
            ("binomialCoefficient" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [4900 4906])
                    ("k" variable (:type "int") (reparse-symbol arg-sub-list) [4907 4913]))                  
                :type "int")
                nil [4876 5056])
            ("binomialProb" function
               (:arguments 
                  ( ("k" variable (:type "int") (reparse-symbol arg-sub-list) [5133 5139])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [5140 5146])
                    ("p" variable (:type "long double") (reparse-symbol arg-sub-list) [5147 5161]))                  
                :type "long double")
                nil [5108 5258])
            ("__binomialProbln" function
               (:arguments 
                  ( ("k" variable (:type "int") (reparse-symbol arg-sub-list) [5289 5295])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [5296 5302])
                    ("p" variable (:type "long double") (reparse-symbol arg-sub-list) [5303 5317]))                  
                :type "long double")
                nil [5260 5434])
            ("binomialCoefficientLn" function
               (:arguments 
                  ( ("k" variable (:type "int") (reparse-symbol arg-sub-list) [5470 5476])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [5477 5483]))                  
                :type "long double")
                nil [5436 5554])
            ("binomialCache" variable (:type ("BinomialCache" type (:type "class") nil nil)) nil [5556 5584])
            ("binomialProbln" function
               (:arguments 
                  ( ("k" variable (:type "int") (reparse-symbol arg-sub-list) [5613 5619])
                    ("n" variable (:type "int") (reparse-symbol arg-sub-list) [5620 5626])
                    ("p" variable (:type "long double") (reparse-symbol arg-sub-list) [5627 5641]))                  
                :type "long double")
                nil [5586 5695])
            ("poissonpln" function
               (:arguments 
                  ( ("observed" variable (:type "int") (reparse-symbol arg-sub-list) [5989 6002])
                    ("expected" variable (:type "int") (reparse-symbol arg-sub-list) [6003 6016]))                  
                :type "long double")
                nil [5966 6096])
            ("poissonp" function
               (:arguments 
                  ( ("observed" variable (:type "int") (reparse-symbol arg-sub-list) [6119 6132])
                    ("expected" variable (:type "int") (reparse-symbol arg-sub-list) [6133 6146]))                  
                :type "long double")
                nil [6098 6275])
            ("poissonPvalLn" function
               (:arguments 
                  ( ("a" variable (:type "int") (reparse-symbol arg-sub-list) [6438 6444])
                    ("b" variable (:type "int") (reparse-symbol arg-sub-list) [6445 6451]))                  
                :type "long double")
                nil [6412 6758])
            ("gammaln" function
               (:arguments 
                  ( ("x" variable (:type "long double") (reparse-symbol arg-sub-list) [6786 6805]))                  
                :type "long double")
                nil [6761 7382])
            ("factorial" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [7411 7422]))                  
                :type "long double")
                nil [7384 7599])
            ("factorialCache" variable (:type ("FactorialCache" type (:type "class") nil nil)) nil [7601 7631])
            ("__factorialln" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [7748 7759]))                  
                :type "long double")
                nil [7717 7932])
            ("cofactor" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [7960 7966])
                    ("i" variable (:type "int") (reparse-symbol arg-sub-list) [7972 7983]))                  
                :type "long double")
                nil [7934 8224])
            ("cofactorln" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [8254 8260])
                    ("i" variable (:type "int") (reparse-symbol arg-sub-list) [8266 8277]))                  
                :type "long double")
                nil [8226 8514])
            ("safe_exp" function
               (:arguments 
                  ( ("ln" variable (:type "long double") (reparse-symbol arg-sub-list) [8634 8649]))                  
                :type "long double")
                nil [8613 8782])
            ("big_exp" function
               (:arguments 
                  ( ("ln" variable (:type "long double") (reparse-symbol arg-sub-list) [8801 8816]))                  
                :type ("BigFloat" type (:type "class") nil nil))
                nil [8784 8914])
            ("logsumexp_probs" function
               (:arguments 
                  ( ("lnv" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("long double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8986 9017]))                  
                :type "long double")
                nil [8958 9499])
            ("logsumexp" function
               (:arguments 
                  ( ("lnv" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("long double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9564 9595]))                  
                :type "long double")
                nil [9542 10217])
            ("betaln" function
               (:arguments 
                  ( ("alphas" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("long double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [10238 10272]))                  
                :type "long double")
                nil [10219 10487])
            ("beta" function
               (:arguments 
                  ( ("alphas" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("long double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [10506 10540]))                  
                :type "long double")
                nil [10489 10576])
            ("hoeffding" function
               (:arguments 
                  ( ("successes" variable (:type "double") (reparse-symbol arg-sub-list) [10600 10617])
                    ("trials" variable (:type "double") (reparse-symbol arg-sub-list) [10618 10632])
                    ("prob" variable (:type "double") (reparse-symbol arg-sub-list) [10633 10645]))                  
                :type "long double")
                nil [10578 10720])
            ("hoeffdingln" function
               (:arguments 
                  ( ("successes" variable (:type "double") (reparse-symbol arg-sub-list) [10746 10763])
                    ("trials" variable (:type "double") (reparse-symbol arg-sub-list) [10764 10778])
                    ("prob" variable (:type "double") (reparse-symbol arg-sub-list) [10779 10791]))                  
                :type "long double")
                nil [10722 10868])
            ("harmonicSum" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [10933 10939]))                  
                :type "long double")
                nil [10909 11063])
            ("isTransition" function
               (:arguments 
                  ( ("ref" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11083 11095])
                    ("alt" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11096 11108]))                  
                :type "bool")
                nil [11065 11314])
            ("levenshteinDistance" function
               (:arguments 
                  ( ("source" variable
                       (:constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11465 11490])
                    ("target" variable
                       (:constant-flag t
                        :type ("std::string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [11491 11516]))                  
                :type "int")
                nil [11441 13432])
            ("dateStr" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [13491 13496]))                  
                :type ("string" type (:type "class") nil nil))
                nil [13476 13700])
            ("string2float" function
               (:arguments 
                  ( ("s" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13727 13743]))                  
                :type "long double")
                nil [13702 13799])
            ("log10string2ln" function
               (:arguments 
                  ( ("s" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13828 13844]))                  
                :type "long double")
                nil [13801 13910])
            ("safedivide" function
               (:arguments 
                  ( ("a" variable (:type "long double") (reparse-symbol arg-sub-list) [13935 13949])
                    ("b" variable (:type "long double") (reparse-symbol arg-sub-list) [13950 13964]))                  
                :type "long double")
                nil [13912 14120])
            ("mergeCigar" function
               (:arguments 
                  ( ("c1" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14140 14157])
                    ("c2" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14158 14175]))                  
                :type ("string" type (:type "class") nil nil))
                nil [14122 14652])
            ("splitCigar" function
               (:arguments 
                  ( ("cigarStr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14692 14715]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [14654 15482])
            ("splitCigarList" function
               (:arguments 
                  ( ("cigarStr" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15524 15547]))                  
                :type ("list" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [15484 16312])
            ("joinCigar" function
               (:arguments 
                  ( ("cigar" variable
                       (:reference 1
                        :constant-flag t
                        :type ("vector" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16331 16371]))                  
                :type ("string" type (:type "class") nil nil))
                nil [16314 16608])
            ("joinCigarList" function
               (:arguments 
                  ( ("cigar" variable
                       (:reference 1
                        :constant-flag t
                        :type ("list" type
                             (:template-specifier 
                                ( ("pair" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16631 16669]))                  
                :type ("string" type (:type "class") nil nil))
                nil [16610 16866])
            ("isEmptyCigarElement" function
               (:arguments 
                  ( ("elem" variable
                       (:reference 1
                        :constant-flag t
                        :type ("pair" type
                             (:template-specifier 
                                ( ("int" type nil nil nil)
                                  ("string" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16893 16923]))                  
                :type "bool")
                nil [16868 16955])
            ("" variable
               (:functionpointer-flag t
                :type ("std::string" type (:type "class") nil nil))
                nil [17022 17205])
            ("normalizeSumToOne" function
               (:arguments 
                  ( ("v" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("long double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17259 17282]))                  
                :type "void")
                nil [17236 17511])
            ("addLinesFromFile" function
               (:arguments 
                  ( ("v" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("string" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17594 17612])
                    ("f" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17613 17629]))                  
                :type "void")
                nil [17572 17875])
            ("lf" variable
               (:dereference 1
                :type "double")
                nil [17878 2408592])
            ("factorialln" function
               (:arguments 
                  ( ("n" variable (:type "int") (reparse-symbol arg-sub-list) [2408613 2408619]))                  
                :type "double")
                nil [2408594 2409047])
            ("entropy" function
               (:arguments 
                  ( ("st" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2409064 2409081]))                  
                :type "double")
                nil [2409049 2409725]))          
    :file "Utility.cpp"
    :pointmax 2409726
    :fsize 2409725
    :lastmodtime '(21565 38081 541449 463000)
    :unmatched-syntax 'nil
    :lexical-table 
        '(("PHRED_MAX" . ((number "50000.0" 103 . 110)))
          )

    )
   (semanticdb-table "Sum.h"
    :file "Sum.h"
    :fsize 264
    :lastmodtime '(21565 38081 522450 371000)
    )
   (semanticdb-table "Product.h"
    :file "Product.h"
    :fsize 357
    :lastmodtime '(21565 38081 521450 419000)
    )
   (semanticdb-table "Genotype.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("Genotype.h" include nil nil [1 22])
            ("multichoose.h" include nil nil [23 47])
            ("multipermute.h" include nil nil [48 73])
            ("uniqueAlleles" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [115 120]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [76 280])
            ("getPloidy" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [306 311]))                  
                :type "int")
                nil [282 466])
            ("counts" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [497 502]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [468 663])
            ("alternateAlleles" function
               (:parent "Genotype"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [707 720]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Allele" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [665 950])
            ("alternateBases" function
               (:parent "Genotype"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [992 1005]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("string" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [952 1247])
            ("alleleCount" function
               (:parent "Genotype"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1275 1294]))                  
                :type "int")
                nil [1249 1459])
            ("alleleCount" function
               (:parent "Genotype"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1487 1502]))                  
                :type "int")
                nil [1461 1681])
            ("alleleSamplingProb" function
               (:parent "Genotype"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1719 1738]))                  
                :type "double")
                nil [1683 1930])
            ("alleleSamplingProb" function
               (:parent "Genotype"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1968 1983]))                  
                :type "double")
                nil [1932 2189])
            ("relativeGenotype" function
               (:parent "Genotype"
                :arguments 
                  ( ("refbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2225 2241])
                    ("alts" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2242 2263]))                  
                :type ("string" type (:type "class") nil nil))
                nil [2191 3336])
            ("relativeGenotype" function
               (:parent "Genotype"
                :arguments 
                  ( ("rg" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3370 3386])
                    ("refbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3387 3403])
                    ("alts" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3404 3425]))                  
                :type "void")
                nil [3338 4388])
            ("relativeGenotype" function
               (:parent "Genotype"
                :arguments 
                  ( ("rg" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4422 4438])
                    ("alleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4439 4463]))                  
                :type "void")
                nil [4390 5233])
            ("relativeGenotype" function
               (:parent "Genotype"
                :arguments 
                  ( ("refbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5269 5285])
                    ("altbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5286 5302]))                  
                :type ("string" type (:type "class") nil nil))
                nil [5235 6140])
            ("containsAllele" function
               (:parent "Genotype"
                :arguments 
                  ( ("base" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6172 6191]))                  
                :type "bool")
                nil [6142 6354])
            ("containsAllele" function
               (:parent "Genotype"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [6386 6401]))                  
                :type "bool")
                nil [6356 6578])
            ("isHomozygous" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6608 6613]))                  
                :type "bool")
                nil [6580 6641])
            ("isHeterozygous" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6692 6697]))                  
                :type "bool")
                nil [6662 6724])
            ("isHomozygousAlternate" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6790 6795]))                  
                :type "bool")
                nil [6753 6859])
            ("isHomozygousReference" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6925 6930]))                  
                :type "bool")
                nil [6888 6993])
            ("alleleProbabilities" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7126 7131]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("long double" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [7076 7355])
            ("alleleProbabilities" function
               (:parent "Genotype"
                :arguments 
                  ( ("observationBias" variable
                       (:reference 1
                        :type ("Bias" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7517 7539]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("long double" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [7467 8017])
            ("str" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [8040 8045]))                  
                :type ("string" type (:type "class") nil nil))
                nil [8019 8302])
            ("IUPAC" function
               (:arguments 
                  ( ("genotype" variable
                       (:reference 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [8317 8336]))                  
                :type ("string" type (:type "class") nil nil))
                nil [8304 8887])
            ("IUPAC2GenotypeStr" function
               (:arguments 
                  ( ("iupac" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8914 8927])
                    ("ploidy" variable (:type "int") (reparse-symbol arg-sub-list) [8928 8939]))                  
                :type ("string" type (:type "class") nil nil))
                nil [8889 9311])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9333 9346])
                    ("rhs" variable
                       (:reference 1
                        :constant-flag t
                        :type ("GenotypeElement" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9347 9374]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [9313 9558])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9580 9593])
                    ("g" variable
                       (:reference 1
                        :constant-flag t
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9594 9612]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [9560 9652])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9674 9687])
                    ("g" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9688 9711]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [9654 9839])
            ("<<" function
               (:operator-flag t
                :arguments 
                  ( ("out" variable
                       (:reference 1
                        :type ("ostream" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9861 9874])
                    ("g" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [9875 9892]))                  
                :type ("ostream" type (:type "class") nil nil))
                nil [9841 10297])
            ("<" function
               (:operator-flag t
                :arguments 
                  ( ("a" variable
                       (:reference 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10315 10327])
                    ("b" variable
                       (:reference 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [10328 10340]))                  
                :type "bool")
                nil [10300 11138])
            ("allPossibleGenotypes" function
               (:arguments 
                  ( ("ploidy" variable (:type "int") (reparse-symbol arg-sub-list) [11178 11189])
                    ("potentialAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [11190 11223]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Genotype" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [11140 11547])
            ("numberOfAlleles" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [11585 11590]))                  
                :type "int")
                nil [11550 11829])
            ("init" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("useObsExpectations" variable (:type "bool") (reparse-symbol arg-sub-list) [11920 11944]))                  
                :type "void")
                nil [11895 14092])
            ("addPriorAlleleCounts" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("priorACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [14135 14162]))                  
                :type "void")
                nil [14094 14495])
            ("alleleCount" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14580 14595]))                  
                :type "int")
                nil [14549 14795])
            ("alleleCount" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [14828 14849]))                  
                :type "int")
                nil [14797 15037])
            ("alleleFrequency" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :type ("Allele" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15082 15097]))                  
                :type "long double")
                nil [15039 15167])
            ("alleleFrequency" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("allele" variable
                       (:reference 1
                        :constant-flag t
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15212 15233]))                  
                :type "long double")
                nil [15169 15303])
            ("genotypeFrequency" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("genotype" variable
                       (:pointer 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15350 15369]))                  
                :type "long double")
                nil [15305 15551])
            ("updateCachedCounts" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("sample" variable
                       (:pointer 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15601 15616])
                    ("oldGenotype" variable
                       (:pointer 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15625 15647])
                    ("newGenotype" variable
                       (:pointer 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [15656 15678])
                    ("useObsExpectations" variable (:type "bool") (reparse-symbol arg-sub-list) [15687 15711]))                  
                :type "void")
                nil [15553 21097])
            ("countFrequencies" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [21145 21150]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("int" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [21099 21604])
            ("counts" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [21640 21645]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [21606 21955])
            ("hetCount" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [21985 21990]))                  
                :type "int")
                nil [21957 22167])
            ("observationCounts" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [22214 22219]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [22169 22476])
            ("observationTotal" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [22514 22519]))                  
                :type "int")
                nil [22478 22761])
            ("ploidy" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [22860 22865]))                  
                :type "int")
                nil [22834 23107])
            ("alleleProbs" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [23156 23161]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("long double" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [23109 23464])
            ("alleles" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [23504 23509]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("string" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [23466 23706])
            ("isHomozygous" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [23795 23800]))                  
                :type "bool")
                nil [23762 23843])
            ("sortSampleDataLikelihoods" function
               (:arguments 
                  ( ("likelihoods" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("SampleDataLikelihood" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [23876 23918]))                  
                :type "void")
                nil [23845 24206])
            ("sortSampleDataLikelihoodsByMarginals" function
               (:arguments 
                  ( ("likelihoods" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("SampleDataLikelihood" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24250 24292]))                  
                :type "bool")
                nil [24208 24743])
            ("sortSampleDataLikelihoodsByMarginals" function
               (:arguments 
                  ( ("samplesLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [24787 24829]))                  
                :type "bool")
                nil [24745 25063])
            ("sortSampleDataLikelihoodsByMarginalsAndObs" function
               (:arguments 
                  ( ("likelihoods" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("SampleDataLikelihood" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25113 25155]))                  
                :type "bool")
                nil [25065 25624])
            ("sortSampleDataLikelihoodsByMarginalsAndObs" function
               (:arguments 
                  ( ("samplesLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [25674 25716]))                  
                :type "bool")
                nil [25626 25956])
            ("sortSampleDataLikelihoodsScaledByMarginals" function
               (:arguments 
                  ( ("likelihoods" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("SampleDataLikelihood" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [26006 26048]))                  
                :type "bool")
                nil [25958 26485])
            ("sortSampleDataLikelihoodsScaledByMarginals" function
               (:arguments 
                  ( ("samplesLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26535 26577]))                  
                :type "bool")
                nil [26487 26817])
            ("dataLikelihoodMaxGenotypeCombo" function
               (:arguments 
                  ( ("combo" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26908 26929])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [26934 26979])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [26984 27002])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [27007 27019])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [27024 27041])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [27046 27059])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [27064 27079])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [27084 27107])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [27112 27137])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [27142 27175]))                  
                :type "void")
                nil [26867 27910])
            ("makeComboByDatalLikelihoodRank" function
               (:arguments 
                  ( ("combo" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27953 27974])
                    ("initialPosition" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27979 28008])
                    ("variantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28081 28133])
                    ("invariantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28138 28192])
                    ("priorACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28197 28224])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [28229 28247])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [28252 28264])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [28269 28286])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [28291 28304])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [28309 28324])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [28329 28352])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [28357 28382])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [28387 28420]))                  
                :type "void")
                nil [27912 29890])
            ("allLocalGenotypeCombinations" function
               (:arguments 
                  ( ("combos" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30063 30091])
                    ("comboKing" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30096 30121])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30126 30171])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30176 30193])
                    ("priorACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [30198 30225])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [30230 30248])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [30253 30265])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [30270 30287])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [30292 30305])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [30310 30325])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [30330 30353])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [30358 30383])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [30388 30421])
                    ("keepCombos" variable (:type "bool") (reparse-symbol arg-sub-list) [30426 30442]))                  
                :type "void")
                nil [30024 33642])
            ("bandedGenotypeCombinations" function
               (:arguments 
                  ( ("combos" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33681 33709])
                    ("comboKing" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33714 33739])
                    ("variantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33744 33796])
                    ("invariantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33801 33855])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [33860 33877])
                    ("priorACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33882 33909])
                    ("bandwidth" variable (:type "int") (reparse-symbol arg-sub-list) [33914 33928])
                    ("banddepth" variable (:type "int") (reparse-symbol arg-sub-list) [33929 33943])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [33948 33966])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [33971 33983])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [33988 34005])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [34010 34023])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [34028 34043])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [34048 34071])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [34076 34101])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [34106 34139])
                    ("keepCombos" variable (:type "bool") (reparse-symbol arg-sub-list) [34144 34160]))                  
                :type "bool")
                nil [33644 39683])
            ("convergentGenotypeComboSearch" function
               (:arguments 
                  ( ("combos" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39725 39753])
                    ("comboKing" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39758 39783])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39788 39833])
                    ("variantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39838 39890])
                    ("invariantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39895 39949])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [39954 39971])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39976 40008])
                    ("priorACs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40013 40040])
                    ("bandwidth" variable (:type "int") (reparse-symbol arg-sub-list) [40045 40059])
                    ("banddepth" variable (:type "int") (reparse-symbol arg-sub-list) [40060 40074])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [40079 40097])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [40102 40114])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [40119 40136])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [40141 40154])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [40159 40174])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [40179 40202])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [40207 40232])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [40237 40270])
                    ("maxiterations" variable (:type "int") (reparse-symbol arg-sub-list) [40275 40293])
                    ("totaliterations" variable
                       (:reference 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [40298 40319])
                    ("addHomozygousCombos" variable (:type "bool") (reparse-symbol arg-sub-list) [40324 40349]))                  
                :type "void")
                nil [39685 44646])
            ("addAllHomozygousCombos" function
               (:arguments 
                  ( ("combos" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [44682 44710])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44715 44760])
                    ("variantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44765 44817])
                    ("invariantSampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44822 44876])
                    ("samples" variable
                       (:reference 1
                        :type ("Samples" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [44881 44898])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [44903 44935])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [44940 44958])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [44963 44975])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [44980 44997])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [45002 45015])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [45020 45035])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [45040 45063])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [45068 45093])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [45098 45131]))                  
                :type "void")
                nil [44649 49154])
            ("probabilityGivenAlleleFrequencyln" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [49313 49326]))                  
                :type "long double")
                nil [49252 49697])
            ("hweComboProb" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [49739 49744]))                  
                :type "long double")
                nil [49699 50019])
            ("hweExpectedFrequencyln" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("genotype" variable
                       (:pointer 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [50109 50128]))                  
                :type "long double")
                nil [50059 50903])
            ("hweProbGenotypeFrequencyln" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("genotype" variable
                       (:pointer 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51066 51085]))                  
                :type "long double")
                nil [51012 53561])
            ("calculatePosteriorProbability" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [53682 53700])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [53709 53721])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [53730 53747])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [53756 53769])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [53778 53793])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [53802 53825])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [53834 53859])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [53868 53901]))                  
                :type "void")
                nil [53623 57865])
            ("alternateAndReferenceCount" function
               (:arguments 
                  ( ("observations" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [57910 57940])
                    ("refbase" variable
                       (:reference 1
                        :type ("string" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [57941 57957])
                    ("altbase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57958 57973]))                  
                :type ("pair" type
                     (:template-specifier 
                        ( ("int" type nil nil nil)
                          ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [57868 58324])
            ("genotypeCombo2Map" function
               (:arguments 
                  ( ("gc" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58350 58368])
                    ("gcm" variable
                       (:reference 1
                        :type ("GenotypeComboMap" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58369 58391]))                  
                :type "void")
                nil [58327 58503])
            ("orderedGenotypeCombo" function
               (:arguments 
                  ( ("combo" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58537 58558])
                    ("orderedCombo" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58563 58591])
                    ("sampleDataLikelihoods" variable
                       (:reference 1
                        :type ("SampleDataLikelihoods" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [58596 58641])
                    ("theta" variable (:type "long double") (reparse-symbol arg-sub-list) [58646 58664])
                    ("pooled" variable (:type "bool") (reparse-symbol arg-sub-list) [58669 58681])
                    ("ewensPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [58686 58703])
                    ("permute" variable (:type "bool") (reparse-symbol arg-sub-list) [58708 58721])
                    ("hwePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [58726 58741])
                    ("binomialObsPriors" variable (:type "bool") (reparse-symbol arg-sub-list) [58746 58769])
                    ("alleleBalancePriors" variable (:type "bool") (reparse-symbol arg-sub-list) [58774 58799])
                    ("diffusionPriorScalar" variable (:type "long double") (reparse-symbol arg-sub-list) [58804 58837]))                  
                :type "void")
                nil [58506 59342])
            ("alternateAlleles" function
               (:arguments 
                  ( ("combo" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [59495 59516])
                    ("referenceBase" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59517 59538]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [59451 60368])
            ("containedAlleleTypes" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [60405 60410]))                  
                :type "int")
                nil [60370 60538])
            ("alleleObservationCounts" function
               (:parent "Genotype"
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60587 60602]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("int" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [60541 60800])
            ("alleleObservationCount" function
               (:parent "Genotype"
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [60839 60854]))                  
                :type "int")
                nil [60802 61037])
            ("sampleHasSupportingObservations" function
               (:parent "Genotype"
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61086 61101]))                  
                :type "bool")
                nil [61039 61302])
            ("sampleHasSupportingObservationsForAllAlleles" function
               (:parent "Genotype"
                :arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [61364 61379]))                  
                :type "bool")
                nil [61304 61600])
            ("getGenotypesByPloidy" function
               (:arguments 
                  ( ("ploidies" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("int" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [61652 61674])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [61675 61707]))                  
                :type ("map" type
                     (:template-specifier 
                        ( ("int" type nil nil nil)
                          ("vector" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [61603 62078])
            ("nullMatchingGenotypes" function
               (:parent "Genotype"
                :arguments 
                  ( ("gts" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Genotype" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [62130 62152]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("Genotype" type (:pointer 1) nil nil))                        
                      :type "class")
                      nil nil))
                nil [62080 62952])
            ("hasNullAllele" function
               (:parent "Genotype"
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [62983 62988]))                  
                :type "bool")
                nil [62954 63026])
            ("appendIndependentCombo" function
               (:parent "GenotypeCombo"
                :arguments 
                  ( ("other" variable
                       (:reference 1
                        :type ("GenotypeCombo" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [63071 63092]))                  
                :type "void")
                nil [63028 64791])
            ("combinePopulationCombos" function
               (:arguments 
                  ( ("genotypeCombos" variable
                       (:reference 1
                        :type ("list" type
                             (:template-specifier 
                                ( ("GenotypeCombo" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [64946 64982])
                    ("genotypeCombosByPopulation" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("list" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [64983 65045]))                  
                :type "void")
                nil [64917 68566]))          
    :file "Genotype.cpp"
    :pointmax 68567
    :fsize 68566
    :lastmodtime '(21565 38081 519450 514000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "DataLikelihood.cpp"
    :major-mode 'c++-mode
    :tags 
        '( ("DataLikelihood.h" include nil nil [1 28])
            ("multichoose.h" include nil nil [29 53])
            ("multipermute.h" include nil nil [54 79])
            ("probObservedAllelesGivenGenotype" function
               (:arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [136 151])
                    ("genotype" variable
                       (:reference 1
                        :type ("Genotype" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [160 179])
                    ("dependenceFactor" variable (:type "double") (reparse-symbol arg-sub-list) [188 212])
                    ("useMapQ" variable (:type "bool") (reparse-symbol arg-sub-list) [221 234])
                    ("observationBias" variable
                       (:reference 1
                        :type ("Bias" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [243 265])
                    ("standardGLs" variable (:type "bool") (reparse-symbol arg-sub-list) [274 291])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [300 332])
                    ("contaminations" variable
                       (:reference 1
                        :type ("Contamination" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [341 371])
                    ("freqs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [380 412]))                  
                :type "long double")
                nil [82 7591])
            ("probObservedAllelesGivenGenotypes" function
               (:arguments 
                  ( ("sample" variable
                       (:reference 1
                        :type ("Sample" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7675 7690])
                    ("genotypes" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Genotype" type (:pointer 1) nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7699 7728])
                    ("dependenceFactor" variable (:type "double") (reparse-symbol arg-sub-list) [7737 7761])
                    ("useMapQ" variable (:type "bool") (reparse-symbol arg-sub-list) [7770 7783])
                    ("observationBias" variable
                       (:reference 1
                        :type ("Bias" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7792 7814])
                    ("standardGLs" variable (:type "bool") (reparse-symbol arg-sub-list) [7823 7840])
                    ("genotypeAlleles" variable
                       (:reference 1
                        :type ("vector" type
                             (:template-specifier 
                                ( ("Allele" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7849 7881])
                    ("contaminations" variable
                       (:reference 1
                        :type ("Contamination" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [7890 7920])
                    ("freqs" variable
                       (:reference 1
                        :type ("map" type
                             (:template-specifier 
                                ( ("string" type nil nil nil)
                                  ("double" type nil nil nil))                                
                              :type "class")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7929 7961]))                  
                :type ("vector" type
                     (:template-specifier 
                        ( ("pair" type nil nil nil))                        
                      :type "class")
                      nil nil))
                nil [7594 8540]))          
    :file "DataLikelihood.cpp"
    :pointmax 8541
    :fsize 8540
    :lastmodtime '(21565 38081 517450 610000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "Multinomial.h"
    :file "Multinomial.h"
    :fsize 361
    :lastmodtime '(21565 38081 520450 466000)
    )
   (semanticdb-table "Dirichlet.h"
    :file "Dirichlet.h"
    :fsize 569
    :lastmodtime '(21565 38081 518450 562000)
    )
   )
  :file "!home!dlee!Projects!freebayes!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
